// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uHRmC1SQrkfdMqVjfGKf9u
// Component: xWH1w-negvEpKw
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: B9FLT8oPZ9C43X/component
import HeroCta from "../../HeroCta"; // plasmic-import: ozAM-MtCORwPgF/component
import SectionTitle from "../../SectionTitle"; // plasmic-import: HsPvkGMx3yKpeK/component
import BenefitsCard from "../../BenefitsCard"; // plasmic-import: AcQyntlRHBwn79/component
import AccordionSliderItem from "../../AccordionSliderItem"; // plasmic-import: gN7pnF8TwNmzHv/component
import SlideArrow from "../../SlideArrow"; // plasmic-import: mQRkM4cmowwPfP/component
import TestemonialCard from "../../TestemonialCard"; // plasmic-import: rrz-suZaNpG1Ac/component
import SlideBullet from "../../SlideBullet"; // plasmic-import: DzQ1Cxjuuc37kr/component
import Footer from "../../Footer"; // plasmic-import: B_NoenvngFrRGS/component

import { useScreenVariants as useScreenVariantsxe6Z4OYQgGkbgB } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: xe6z4oYQgGkbgB/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_blank_project_mobile_first_css from "../apoiase_website_mobile_first/plasmic_apoiase_website_mobile_first.module.css"; // plasmic-import: bFry1ML5XR1ujHJJdSKVcs/projectcss
import projectcss from "./plasmic_apoiase_home_mobile_first.module.css"; // plasmic-import: uHRmC1SQrkfdMqVjfGKf9u/projectcss
import sty from "./PlasmicContinuaPorMes.module.css"; // plasmic-import: xWH1w-negvEpKw/css

import ApoiaseIconMoneysvgIcon from "./icons/PlasmicIcon__ApoiaseIconMoneysvg"; // plasmic-import: sa9rgZFmly7pfA/icon
import ApoiaseIconFreedomsvgIcon from "./icons/PlasmicIcon__ApoiaseIconFreedomsvg"; // plasmic-import: Xxf64751efjFic/icon
import ApoiaseIconManagmentsvgIcon from "./icons/PlasmicIcon__ApoiaseIconManagmentsvg"; // plasmic-import: cJ2JEArT1Vrh8o/icon
import ApoiaseIconArrowLeftIcon from "./icons/PlasmicIcon__ApoiaseIconArrowLeft"; // plasmic-import: Za6ysYytYSJTPR/icon
import ApoiaseIconArrowRightIcon from "./icons/PlasmicIcon__ApoiaseIconArrowRight"; // plasmic-import: V9-fXVC3GD8ubn/icon
import ApoiaseIconMessagesIcon from "./icons/PlasmicIcon__ApoiaseIconMessages"; // plasmic-import: Y8u2bYxodiYauD/icon
import ApoiaseIconMuralIcon from "./icons/PlasmicIcon__ApoiaseIconMural"; // plasmic-import: XNMF3iiSRAxQxk/icon
import ApoiaseIconSupportIcon from "./icons/PlasmicIcon__ApoiaseIconSupport"; // plasmic-import: WSts9xq5xVQ-wG/icon
import ApoiaseIconCoinIcon from "./icons/PlasmicIcon__ApoiaseIconCoin"; // plasmic-import: B1-JtpJsEMQooM/icon
import ApoiaseIconManagerIcon from "./icons/PlasmicIcon__ApoiaseIconManager"; // plasmic-import: oTsPHHge7fDrR6/icon
import ApoiaseIconBookIcon from "./icons/PlasmicIcon__ApoiaseIconBook"; // plasmic-import: T_ibgnDsHlgCLF/icon

export type PlasmicContinuaPorMes__VariantMembers = {};

export type PlasmicContinuaPorMes__VariantsArgs = {};
type VariantPropType = keyof PlasmicContinuaPorMes__VariantsArgs;
export const PlasmicContinuaPorMes__VariantProps = new Array<VariantPropType>();

export type PlasmicContinuaPorMes__ArgsType = {};
type ArgPropType = keyof PlasmicContinuaPorMes__ArgsType;
export const PlasmicContinuaPorMes__ArgProps = new Array<ArgPropType>();

export type PlasmicContinuaPorMes__OverridesType = {
  continuaPorMes?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  sectionHero?: p.Flex<"section">;
  container2?: p.Flex<"div">;
  heroCta?: p.Flex<typeof HeroCta>;
  sectionPresentation?: p.Flex<"section">;
  container?: p.Flex<"div">;
  sectionValues?: p.Flex<"section">;
  container3?: p.Flex<"div">;
  icon?: p.Flex<"svg">;
  icon2?: p.Flex<"svg">;
  icon3?: p.Flex<"svg">;
  sectionHowTo?: p.Flex<"section">;
  container4?: p.Flex<"div">;
  sectionTestemonials?: p.Flex<"section">;
  container5?: p.Flex<"div">;
  testemonialSlider?: p.Flex<"div">;
  slideContent?: p.Flex<"div">;
  testemonialCard?: p.Flex<typeof TestemonialCard>;
  svg?: p.Flex<"svg">;
  slideBullet?: p.Flex<typeof SlideBullet>;
  sectionBenefits?: p.Flex<"section">;
  h2?: p.Flex<"h2">;
  icon7?: p.Flex<"svg">;
  icon8?: p.Flex<"svg">;
  icon9?: p.Flex<"svg">;
  icon4?: p.Flex<"svg">;
  icon5?: p.Flex<"svg">;
  icon6?: p.Flex<"svg">;
  sectionWho?: p.Flex<"section">;
  container6?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultContinuaPorMesProps {}

export const defaultContinuaPorMes__Args: Partial<PlasmicContinuaPorMes__ArgsType> =
  {};

function PlasmicContinuaPorMes__RenderFunc(props: {
  variants: PlasmicContinuaPorMes__VariantsArgs;
  args: PlasmicContinuaPorMes__ArgsType;
  overrides: PlasmicContinuaPorMes__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultContinuaPorMes__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsxe6Z4OYQgGkbgB()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{"Contínua por Mês | APOIA.se"}</title>
        <meta
          key="og:title"
          property="og:title"
          content={"Contínua por Mês | APOIA.se"}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"continuaPorMes"}
          data-plasmic-override={overrides.continuaPorMes}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_blank_project_mobile_first_css.plasmic_tokens,
            sty.continuaPorMes
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          {true ? (
            <section
              data-plasmic-name={"sectionHero"}
              data-plasmic-override={overrides.sectionHero}
              className={classNames(projectcss.all, sty.sectionHero)}
            >
              <div
                data-plasmic-name={"container2"}
                data-plasmic-override={overrides.container2}
                className={classNames(projectcss.all, sty.container2)}
              >
                <HeroCta
                  data-plasmic-name={"heroCta"}
                  data-plasmic-override={overrides.heroCta}
                  className={classNames("__wab_instance", sty.heroCta)}
                  headline={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gvlAx
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>
                          {"Financiamento \nColetivo "}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#DB2328" }}
                        >
                          {"Contínuo"}
                        </span>
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>
                  }
                  subtitle={
                    "Remunere seu trabalho junto da maior comunidade de crowdfunding mensal do Brasil"
                  }
                  withImage={true}
                />
              </div>
            </section>
          ) : null}
          {true ? (
            <section
              data-plasmic-name={"sectionPresentation"}
              data-plasmic-override={overrides.sectionPresentation}
              className={classNames(projectcss.all, sty.sectionPresentation)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"container"}
                data-plasmic-override={overrides.container}
                hasGap={true}
                className={classNames(projectcss.all, sty.container)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__teaCo)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___8AihD)}
                    displayHeight={"100%" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"80%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/apoiase_home_mobile_first/images/apoiaseIllustrationSection2Svg.svg",
                      fullWidth: 161,
                      fullHeight: 150,
                      aspectRatio: 1.075758
                    }}
                  />
                </div>

                <SectionTitle
                  className={classNames(
                    "__wab_instance",
                    sty.sectionTitle__juyll
                  )}
                  subtitle={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__koj4
                      )}
                    >
                      {
                        "No Financiamento Coletivo Contínuo você tem liberdade para fazer o que ama, se conecta com quem acredita no seu trabalho e é remunerado(a) por isso, mês a mês."
                      }
                    </div>
                  }
                  title={"Viva daquilo que você ama"}
                />
              </p.Stack>
            </section>
          ) : null}
          {true ? (
            <section
              data-plasmic-name={"sectionValues"}
              data-plasmic-override={overrides.sectionValues}
              className={classNames(projectcss.all, sty.sectionValues)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"container3"}
                data-plasmic-override={overrides.container3}
                hasGap={true}
                className={classNames(projectcss.all, sty.container3)}
              >
                <BenefitsCard
                  className={classNames(
                    "__wab_instance",
                    sty.benefitsCard__lPhfY
                  )}
                  description={
                    "Com o apoio do seus fãs, você cria uma fonte de renda pulverizada e com alta previsibilidade de arrecadação."
                  }
                  icon={
                    <ApoiaseIconMoneysvgIcon
                      data-plasmic-name={"icon"}
                      data-plasmic-override={overrides.icon}
                      className={classNames(projectcss.all, sty.icon)}
                      role={"img"}
                    />
                  }
                  title={
                    <h5
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5__lxyrG
                      )}
                    >
                      {"Crie uma fonte de receita mensal"}
                    </h5>
                  }
                  vertical={true}
                />

                <BenefitsCard
                  className={classNames(
                    "__wab_instance",
                    sty.benefitsCard__ffLss
                  )}
                  description={
                    "Você escolhe como investir o dinheiro que você recebe dos seus apoiadores(as), autonomia para fazer do seu jeito."
                  }
                  icon={
                    <ApoiaseIconFreedomsvgIcon
                      data-plasmic-name={"icon2"}
                      data-plasmic-override={overrides.icon2}
                      className={classNames(projectcss.all, sty.icon2)}
                      role={"img"}
                    />
                  }
                  title={
                    <h5
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5__cALc
                      )}
                    >
                      {"Liberdade para fazer o que você ama"}
                    </h5>
                  }
                  vertical={true}
                />

                <BenefitsCard
                  className={classNames(
                    "__wab_instance",
                    sty.benefitsCard__rzp0F
                  )}
                  description={
                    "Cuidamos da parte financeira e garantimos o melhor experiência\npara você e seus apoiadores(as)."
                  }
                  icon={
                    <ApoiaseIconManagmentsvgIcon
                      data-plasmic-name={"icon3"}
                      data-plasmic-override={overrides.icon3}
                      className={classNames(projectcss.all, sty.icon3)}
                      role={"img"}
                    />
                  }
                  title={
                    <h5
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5__apBvm
                      )}
                    >
                      {"Nós Fazemos a parte difícil pra você"}
                    </h5>
                  }
                  vertical={true}
                />
              </p.Stack>
            </section>
          ) : null}
          {true ? (
            <section
              data-plasmic-name={"sectionHowTo"}
              data-plasmic-override={overrides.sectionHowTo}
              className={classNames(projectcss.all, sty.sectionHowTo)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"container4"}
                data-plasmic-override={overrides.container4}
                hasGap={true}
                className={classNames(projectcss.all, sty.container4)}
              >
                <SectionTitle
                  className={classNames(
                    "__wab_instance",
                    sty.sectionTitle__pOc5R
                  )}
                  subtitle={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kpQMc
                      )}
                    >
                      {
                        "No Financiamento Coletivo Contínuo você tem liberdade para fazer o que ama, se conecta com quem acredita no seu trabalho e é remunerado(a) por isso, mês a mês."
                      }
                    </div>
                  }
                  title={"Como funciona?"}
                  withoutSeparator={true}
                  withoutSubtitle={true}
                />

                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__dlvFg)}
                  >
                    <AccordionSliderItem
                      className={classNames(
                        "__wab_instance",
                        sty.accordionSliderItem__cjLit
                      )}
                      description={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__h8U23
                          )}
                        >
                          {
                            "Conte a história do seu projeto, porquê ele existe e onde você quer chegar, defina suas metas financeiras e as recompensas que seus apoiadores(as) receberão ao apoiar seu trabalho."
                          }
                        </div>
                      }
                      openned={true}
                      title={"Monte sua página de campanha"}
                    />

                    <AccordionSliderItem
                      className={classNames(
                        "__wab_instance",
                        sty.accordionSliderItem__gHqU5
                      )}
                      description={
                        "Divulgue a sua campanha de crowdfunding em todas suas redes. Enquanto isso a gente cuida dos pagamentos e atendimento dos seus apoiadores(as)."
                      }
                      number={"02."}
                      openned={true}
                      title={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kb7KS
                          )}
                        >
                          {"Ative sua rede"}
                        </div>
                      }
                    />

                    <AccordionSliderItem
                      className={classNames(
                        "__wab_instance",
                        sty.accordionSliderItem__lJymv
                      )}
                      description={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___0KYiD
                          )}
                        >
                          {
                            "Tem chat para conversas privadas com seus apoiadores, mural para postagens, vídeo de agradecimento. Um monte de recursos legais para você interagir, agradecer e engajar sua base apoiadora."
                          }
                        </div>
                      }
                      number={"03."}
                      openned={true}
                      title={"Gere conexão"}
                    />

                    <AccordionSliderItem
                      className={classNames(
                        "__wab_instance",
                        sty.accordionSliderItem__ryepD
                      )}
                      number={"04."}
                      openned={true}
                    />
                  </p.Stack>
                ) : null}
              </p.Stack>
            </section>
          ) : null}
          {true ? (
            <section
              data-plasmic-name={"sectionTestemonials"}
              data-plasmic-override={overrides.sectionTestemonials}
              className={classNames(projectcss.all, sty.sectionTestemonials)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"container5"}
                data-plasmic-override={overrides.container5}
                hasGap={true}
                className={classNames(projectcss.all, sty.container5)}
              >
                <SectionTitle
                  className={classNames(
                    "__wab_instance",
                    sty.sectionTitle__wQu7W
                  )}
                  subtitle={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bEg9G
                      )}
                    >
                      {
                        "No Financiamento Coletivo Contínuo você tem liberdade para fazer o que ama, se conecta com quem acredita no seu trabalho e é remunerado(a) por isso, mês a mês."
                      }
                    </div>
                  }
                  title={
                    "A plataforma com o maior número de crowdfundings mensais do Brasil"
                  }
                  withoutSubtitle={true}
                />

                {true ? (
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"testemonialSlider"}
                    data-plasmic-override={overrides.testemonialSlider}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.testemonialSlider
                    )}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"slideContent"}
                        data-plasmic-override={overrides.slideContent}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.slideContent)}
                      >
                        {true ? (
                          <SlideArrow
                            className={classNames(
                              "__wab_instance",
                              sty.slideArrow__kPgt4
                            )}
                          />
                        ) : null}

                        <TestemonialCard
                          data-plasmic-name={"testemonialCard"}
                          data-plasmic-override={overrides.testemonialCard}
                          className={classNames(
                            "__wab_instance",
                            sty.testemonialCard
                          )}
                        >
                          {
                            "           A APOIA.se me deu autonomia para criar conteúdo sobre ciência e saúde mental. Hoje eu consigo pagar as contas fazendo o que amo. Me deu autonomia para criar conteúdo sobre ciência e saúde mental. Hoje eu consigo pagar as contas fazendo o que amo. Me deu autonomia para criar conteúdo sobre ciência e saúde mental. Hoje eu consigo pagar as contas fazendo o que amo. "
                          }
                        </TestemonialCard>

                        {true ? (
                          <SlideArrow
                            className={classNames(
                              "__wab_instance",
                              sty.slideArrow__csVmd
                            )}
                          >
                            <ApoiaseIconArrowRightIcon
                              data-plasmic-name={"svg"}
                              data-plasmic-override={overrides.svg}
                              className={classNames(projectcss.all, sty.svg)}
                              role={"img"}
                            />
                          </SlideArrow>
                        ) : null}
                      </p.Stack>
                    ) : null}
                    {true ? (
                      <SlideBullet
                        data-plasmic-name={"slideBullet"}
                        data-plasmic-override={overrides.slideBullet}
                        className={classNames(
                          "__wab_instance",
                          sty.slideBullet
                        )}
                      />
                    ) : null}
                  </p.Stack>
                ) : null}
              </p.Stack>
            </section>
          ) : null}
          {true ? (
            <p.Stack
              as={"section"}
              data-plasmic-name={"sectionBenefits"}
              data-plasmic-override={overrides.sectionBenefits}
              hasGap={true}
              className={classNames(projectcss.all, sty.sectionBenefits)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__lSxmx)}
              >
                {true ? (
                  <SectionTitle
                    className={classNames(
                      "__wab_instance",
                      sty.sectionTitle___70X1U
                    )}
                    subtitle={
                      true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__eWrjJ
                          )}
                        >
                          {
                            "Escolha a modalidade que melhor se adapta ao que você está fazendo"
                          }
                        </div>
                      ) : null
                    }
                    title={
                      <h2
                        data-plasmic-name={"h2"}
                        data-plasmic-override={overrides.h2}
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2
                        )}
                      >
                        {"Por que a APOIA.se?"}
                      </h2>
                    }
                    withoutSubtitle={true}
                  />
                ) : null}
              </p.Stack>

              <div className={classNames(projectcss.all, sty.freeBox__mlHLr)}>
                <BenefitsCard
                  className={classNames(
                    "__wab_instance",
                    sty.benefitsCard___6JtrO
                  )}
                  description={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nKi4Z
                      )}
                    >
                      {
                        "Com o CHAT da APOIA.se você e sua base de apoiadores(as) se comunicam em tempo real. Mais conexão, interação e engajamento você encontra aqui."
                      }
                    </div>
                  }
                  icon={
                    <ApoiaseIconMessagesIcon
                      data-plasmic-name={"icon7"}
                      data-plasmic-override={overrides.icon7}
                      className={classNames(projectcss.all, sty.icon7)}
                      role={"img"}
                    />
                  }
                  title={"Comunicação direta com seus fãs"}
                />

                <BenefitsCard
                  className={classNames(
                    "__wab_instance",
                    sty.benefitsCard__vbgc7
                  )}
                  description={
                    "Através do mural, você pode compartilhar conteúdos exclusivos para as pessoas que te apoiam."
                  }
                  icon={
                    <ApoiaseIconMuralIcon
                      data-plasmic-name={"icon8"}
                      data-plasmic-override={overrides.icon8}
                      className={classNames(projectcss.all, sty.icon8)}
                      role={"img"}
                    />
                  }
                  title={"Mural para conteúdos exclusivos"}
                />

                <BenefitsCard
                  className={classNames(
                    "__wab_instance",
                    sty.benefitsCard__acA5
                  )}
                  description={
                    "Com o CHAT da APOIA.se você e sua base de apoiadores(as) se comunicam em tempo real. Mais conexão, interação e engajamento você encontra aqui."
                  }
                  icon={
                    <ApoiaseIconSupportIcon
                      data-plasmic-name={"icon9"}
                      data-plasmic-override={overrides.icon9}
                      className={classNames(projectcss.all, sty.icon9)}
                      role={"img"}
                    />
                  }
                  title={"Suporte para seus apoiadores"}
                />

                <BenefitsCard
                  className={classNames(
                    "__wab_instance",
                    sty.benefitsCard___8NoAd
                  )}
                  description={
                    "Aqui você tem a liberdade de escolher qualquer valor de apoio. Do mais simbólico ao seu valor máximo."
                  }
                  icon={
                    <ApoiaseIconCoinIcon
                      data-plasmic-name={"icon4"}
                      data-plasmic-override={overrides.icon4}
                      className={classNames(projectcss.all, sty.icon4)}
                      role={"img"}
                    />
                  }
                  title={"A única plataforma com apoios a partir de R$ 1"}
                />

                <BenefitsCard
                  className={classNames(
                    "__wab_instance",
                    sty.benefitsCard__twIZ
                  )}
                  description={
                    "Você tem total controle do que está rolando na sua campanha. Através do Gerenciador de Campanhas você tem acesso a relatórios de apoiadores(as) e outras funcionalidades de gestão."
                  }
                  icon={
                    <ApoiaseIconManagerIcon
                      data-plasmic-name={"icon5"}
                      data-plasmic-override={overrides.icon5}
                      className={classNames(projectcss.all, sty.icon5)}
                      role={"img"}
                    />
                  }
                  title={"Gerenciador de Campanhas"}
                />

                <BenefitsCard
                  className={classNames(
                    "__wab_instance",
                    sty.benefitsCard__lAtN5
                  )}
                  description={
                    "É sucesso que você quer? Oferecemos E-books e um blog cheio de conteúdo riquíssimos para te ajudar a construir uma campanha de sucesso."
                  }
                  icon={
                    <ApoiaseIconBookIcon
                      data-plasmic-name={"icon6"}
                      data-plasmic-override={overrides.icon6}
                      className={classNames(projectcss.all, sty.icon6)}
                      role={"img"}
                    />
                  }
                  title={"Materiais educativos para te ajudar"}
                />
              </div>
            </p.Stack>
          ) : null}
          {true ? (
            <section
              data-plasmic-name={"sectionWho"}
              data-plasmic-override={overrides.sectionWho}
              className={classNames(projectcss.all, sty.sectionWho)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"container6"}
                data-plasmic-override={overrides.container6}
                hasGap={true}
                className={classNames(projectcss.all, sty.container6)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__iF7Ii)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__q70WA)}
                    displayHeight={"100%" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/apoiase_home_mobile_first/images/apoiaseIllustrationSectionWhosvg.svg",
                      fullWidth: 172,
                      fullHeight: 150,
                      aspectRatio: 1.149856
                    }}
                  />
                </div>

                <SectionTitle
                  className={classNames(
                    "__wab_instance",
                    sty.sectionTitle___0K8U3
                  )}
                  subtitle={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__p2Yw
                      )}
                    >
                      {
                        "Produção de conteúdo, Games, ONGs, Cultura, Empreendedorismo, enfim. Se você tem qualquer iniciativa, seja criativa, social ou artística e precise de renda mensal para entregar para o mundo resultados incríveis, o Financiamento Coletivo Contínuo é pra você.\n"
                      }
                    </div>
                  }
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dPvaZ
                      )}
                    >
                      {"Para quem serve a APOIA.se Contínua Por Mês?"}
                    </div>
                  }
                />
              </p.Stack>
            </section>
          ) : null}

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  continuaPorMes: [
    "continuaPorMes",
    "header",
    "sectionHero",
    "container2",
    "heroCta",
    "sectionPresentation",
    "container",
    "sectionValues",
    "container3",
    "icon",
    "icon2",
    "icon3",
    "sectionHowTo",
    "container4",
    "sectionTestemonials",
    "container5",
    "testemonialSlider",
    "slideContent",
    "testemonialCard",
    "svg",
    "slideBullet",
    "sectionBenefits",
    "h2",
    "icon7",
    "icon8",
    "icon9",
    "icon4",
    "icon5",
    "icon6",
    "sectionWho",
    "container6",
    "footer"
  ],
  header: ["header"],
  sectionHero: ["sectionHero", "container2", "heroCta"],
  container2: ["container2", "heroCta"],
  heroCta: ["heroCta"],
  sectionPresentation: ["sectionPresentation", "container"],
  container: ["container"],
  sectionValues: ["sectionValues", "container3", "icon", "icon2", "icon3"],
  container3: ["container3", "icon", "icon2", "icon3"],
  icon: ["icon"],
  icon2: ["icon2"],
  icon3: ["icon3"],
  sectionHowTo: ["sectionHowTo", "container4"],
  container4: ["container4"],
  sectionTestemonials: [
    "sectionTestemonials",
    "container5",
    "testemonialSlider",
    "slideContent",
    "testemonialCard",
    "svg",
    "slideBullet"
  ],
  container5: [
    "container5",
    "testemonialSlider",
    "slideContent",
    "testemonialCard",
    "svg",
    "slideBullet"
  ],
  testemonialSlider: [
    "testemonialSlider",
    "slideContent",
    "testemonialCard",
    "svg",
    "slideBullet"
  ],
  slideContent: ["slideContent", "testemonialCard", "svg"],
  testemonialCard: ["testemonialCard"],
  svg: ["svg"],
  slideBullet: ["slideBullet"],
  sectionBenefits: [
    "sectionBenefits",
    "h2",
    "icon7",
    "icon8",
    "icon9",
    "icon4",
    "icon5",
    "icon6"
  ],
  h2: ["h2"],
  icon7: ["icon7"],
  icon8: ["icon8"],
  icon9: ["icon9"],
  icon4: ["icon4"],
  icon5: ["icon5"],
  icon6: ["icon6"],
  sectionWho: ["sectionWho", "container6"],
  container6: ["container6"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  continuaPorMes: "div";
  header: typeof Header;
  sectionHero: "section";
  container2: "div";
  heroCta: typeof HeroCta;
  sectionPresentation: "section";
  container: "div";
  sectionValues: "section";
  container3: "div";
  icon: "svg";
  icon2: "svg";
  icon3: "svg";
  sectionHowTo: "section";
  container4: "div";
  sectionTestemonials: "section";
  container5: "div";
  testemonialSlider: "div";
  slideContent: "div";
  testemonialCard: typeof TestemonialCard;
  svg: "svg";
  slideBullet: typeof SlideBullet;
  sectionBenefits: "section";
  h2: "h2";
  icon7: "svg";
  icon8: "svg";
  icon9: "svg";
  icon4: "svg";
  icon5: "svg";
  icon6: "svg";
  sectionWho: "section";
  container6: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicContinuaPorMes__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicContinuaPorMes__VariantsArgs;
    args?: PlasmicContinuaPorMes__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicContinuaPorMes__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicContinuaPorMes__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicContinuaPorMes__ArgProps,
      internalVariantPropNames: PlasmicContinuaPorMes__VariantProps
    });

    return PlasmicContinuaPorMes__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "continuaPorMes") {
    func.displayName = "PlasmicContinuaPorMes";
  } else {
    func.displayName = `PlasmicContinuaPorMes.${nodeName}`;
  }
  return func;
}

export const PlasmicContinuaPorMes = Object.assign(
  // Top-level PlasmicContinuaPorMes renders the root element
  makeNodeComponent("continuaPorMes"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    sectionHero: makeNodeComponent("sectionHero"),
    container2: makeNodeComponent("container2"),
    heroCta: makeNodeComponent("heroCta"),
    sectionPresentation: makeNodeComponent("sectionPresentation"),
    container: makeNodeComponent("container"),
    sectionValues: makeNodeComponent("sectionValues"),
    container3: makeNodeComponent("container3"),
    icon: makeNodeComponent("icon"),
    icon2: makeNodeComponent("icon2"),
    icon3: makeNodeComponent("icon3"),
    sectionHowTo: makeNodeComponent("sectionHowTo"),
    container4: makeNodeComponent("container4"),
    sectionTestemonials: makeNodeComponent("sectionTestemonials"),
    container5: makeNodeComponent("container5"),
    testemonialSlider: makeNodeComponent("testemonialSlider"),
    slideContent: makeNodeComponent("slideContent"),
    testemonialCard: makeNodeComponent("testemonialCard"),
    svg: makeNodeComponent("svg"),
    slideBullet: makeNodeComponent("slideBullet"),
    sectionBenefits: makeNodeComponent("sectionBenefits"),
    h2: makeNodeComponent("h2"),
    icon7: makeNodeComponent("icon7"),
    icon8: makeNodeComponent("icon8"),
    icon9: makeNodeComponent("icon9"),
    icon4: makeNodeComponent("icon4"),
    icon5: makeNodeComponent("icon5"),
    icon6: makeNodeComponent("icon6"),
    sectionWho: makeNodeComponent("sectionWho"),
    container6: makeNodeComponent("container6"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicContinuaPorMes
    internalVariantProps: PlasmicContinuaPorMes__VariantProps,
    internalArgProps: PlasmicContinuaPorMes__ArgProps
  }
);

export default PlasmicContinuaPorMes;
/* prettier-ignore-end */
