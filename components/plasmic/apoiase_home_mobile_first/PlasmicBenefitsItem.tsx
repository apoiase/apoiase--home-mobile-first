// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uHRmC1SQrkfdMqVjfGKf9u
// Component: D76PYThZLkOlj5
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_blank_project_mobile_first_css from "../apoiase_website_mobile_first/plasmic_apoiase_website_mobile_first.module.css"; // plasmic-import: bFry1ML5XR1ujHJJdSKVcs/projectcss
import projectcss from "./plasmic_apoiase_home_mobile_first.module.css"; // plasmic-import: uHRmC1SQrkfdMqVjfGKf9u/projectcss
import sty from "./PlasmicBenefitsItem.module.css"; // plasmic-import: D76PYThZLkOlj5/css

import ApoiaseIconCheckIcon from "./icons/PlasmicIcon__ApoiaseIconCheck"; // plasmic-import: Mr5axEh571LUti/icon

export type PlasmicBenefitsItem__VariantMembers = {};

export type PlasmicBenefitsItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicBenefitsItem__VariantsArgs;
export const PlasmicBenefitsItem__VariantProps = new Array<VariantPropType>();

export type PlasmicBenefitsItem__ArgsType = {
  description?: React.ReactNode;
};

type ArgPropType = keyof PlasmicBenefitsItem__ArgsType;
export const PlasmicBenefitsItem__ArgProps = new Array<ArgPropType>(
  "description"
);

export type PlasmicBenefitsItem__OverridesType = {
  benefitsItem?: p.Flex<"div">;
  apoiaseIconCheck?: p.Flex<"svg">;
  p?: p.Flex<"p">;
};

export interface DefaultBenefitsItemProps {
  description?: React.ReactNode;
  className?: string;
}

export const defaultBenefitsItem__Args: Partial<PlasmicBenefitsItem__ArgsType> =
  {};

function PlasmicBenefitsItem__RenderFunc(props: {
  variants: PlasmicBenefitsItem__VariantsArgs;
  args: PlasmicBenefitsItem__ArgsType;
  overrides: PlasmicBenefitsItem__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultBenefitsItem__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"benefitsItem"}
      data-plasmic-override={overrides.benefitsItem}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_blank_project_mobile_first_css.plasmic_tokens,
        sty.benefitsItem
      )}
    >
      <ApoiaseIconCheckIcon
        data-plasmic-name={"apoiaseIconCheck"}
        data-plasmic-override={overrides.apoiaseIconCheck}
        className={classNames(projectcss.all, sty.apoiaseIconCheck)}
        role={"img"}
      />

      <p
        data-plasmic-name={"p"}
        data-plasmic-override={overrides.p}
        className={classNames(projectcss.all, projectcss.p, sty.p)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Campanha sem prazo para terminar",
          value: args.description
        })}
      </p>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  benefitsItem: ["benefitsItem", "apoiaseIconCheck", "p"],
  apoiaseIconCheck: ["apoiaseIconCheck"],
  p: ["p"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  benefitsItem: "div";
  apoiaseIconCheck: "svg";
  p: "p";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBenefitsItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBenefitsItem__VariantsArgs;
    args?: PlasmicBenefitsItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBenefitsItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBenefitsItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBenefitsItem__ArgProps,
      internalVariantPropNames: PlasmicBenefitsItem__VariantProps
    });

    return PlasmicBenefitsItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "benefitsItem") {
    func.displayName = "PlasmicBenefitsItem";
  } else {
    func.displayName = `PlasmicBenefitsItem.${nodeName}`;
  }
  return func;
}

export const PlasmicBenefitsItem = Object.assign(
  // Top-level PlasmicBenefitsItem renders the root element
  makeNodeComponent("benefitsItem"),
  {
    // Helper components rendering sub-elements
    apoiaseIconCheck: makeNodeComponent("apoiaseIconCheck"),
    p: makeNodeComponent("p"),

    // Metadata about props expected for PlasmicBenefitsItem
    internalVariantProps: PlasmicBenefitsItem__VariantProps,
    internalArgProps: PlasmicBenefitsItem__ArgProps
  }
);

export default PlasmicBenefitsItem;
/* prettier-ignore-end */
