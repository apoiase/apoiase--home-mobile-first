// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uHRmC1SQrkfdMqVjfGKf9u
// Component: mQRkM4cmowwPfP
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_blank_project_mobile_first_css from "../apoiase_website_mobile_first/plasmic_apoiase_website_mobile_first.module.css"; // plasmic-import: bFry1ML5XR1ujHJJdSKVcs/projectcss
import projectcss from "./plasmic_apoiase_home_mobile_first.module.css"; // plasmic-import: uHRmC1SQrkfdMqVjfGKf9u/projectcss
import sty from "./PlasmicSlideArrow.module.css"; // plasmic-import: mQRkM4cmowwPfP/css

import ApoiaseIconArrowLeftIcon from "./icons/PlasmicIcon__ApoiaseIconArrowLeft"; // plasmic-import: Za6ysYytYSJTPR/icon

export type PlasmicSlideArrow__VariantMembers = {};

export type PlasmicSlideArrow__VariantsArgs = {};
type VariantPropType = keyof PlasmicSlideArrow__VariantsArgs;
export const PlasmicSlideArrow__VariantProps = new Array<VariantPropType>();

export type PlasmicSlideArrow__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicSlideArrow__ArgsType;
export const PlasmicSlideArrow__ArgProps = new Array<ArgPropType>("children");

export type PlasmicSlideArrow__OverridesType = {
  slideArrow?: p.Flex<"div">;
  icon?: p.Flex<"div">;
};

export interface DefaultSlideArrowProps {
  children?: React.ReactNode;
  className?: string;
}

export const defaultSlideArrow__Args: Partial<PlasmicSlideArrow__ArgsType> = {};

function PlasmicSlideArrow__RenderFunc(props: {
  variants: PlasmicSlideArrow__VariantsArgs;
  args: PlasmicSlideArrow__ArgsType;
  overrides: PlasmicSlideArrow__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultSlideArrow__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    true ? (
      <div
        data-plasmic-name={"slideArrow"}
        data-plasmic-override={overrides.slideArrow}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_blank_project_mobile_first_css.plasmic_tokens,
          sty.slideArrow
        )}
      >
        <div
          data-plasmic-name={"icon"}
          data-plasmic-override={overrides.icon}
          className={classNames(projectcss.all, sty.icon)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <ApoiaseIconArrowLeftIcon
                className={classNames(projectcss.all, sty.svg__voH1D)}
                role={"img"}
              />
            ),

            value: args.children
          })}
        </div>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  slideArrow: ["slideArrow", "icon"],
  icon: ["icon"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  slideArrow: "div";
  icon: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSlideArrow__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSlideArrow__VariantsArgs;
    args?: PlasmicSlideArrow__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSlideArrow__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSlideArrow__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSlideArrow__ArgProps,
      internalVariantPropNames: PlasmicSlideArrow__VariantProps
    });

    return PlasmicSlideArrow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "slideArrow") {
    func.displayName = "PlasmicSlideArrow";
  } else {
    func.displayName = `PlasmicSlideArrow.${nodeName}`;
  }
  return func;
}

export const PlasmicSlideArrow = Object.assign(
  // Top-level PlasmicSlideArrow renders the root element
  makeNodeComponent("slideArrow"),
  {
    // Helper components rendering sub-elements
    icon: makeNodeComponent("icon"),

    // Metadata about props expected for PlasmicSlideArrow
    internalVariantProps: PlasmicSlideArrow__VariantProps,
    internalArgProps: PlasmicSlideArrow__ArgProps
  }
);

export default PlasmicSlideArrow;
/* prettier-ignore-end */
