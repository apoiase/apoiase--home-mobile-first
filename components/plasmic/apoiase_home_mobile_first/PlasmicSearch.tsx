// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uHRmC1SQrkfdMqVjfGKf9u
// Component: QRAoC0EgvJgG6
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SearchInput from "../../SearchInput"; // plasmic-import: tLoc9U0EyoHtZB/component
import Button from "../../Button"; // plasmic-import: 9qvF8EbiZQKemF/component
import TabItem from "../../TabItem"; // plasmic-import: VNFIRMJTctpIiZ/component
import CampaignCard from "../../CampaignCard"; // plasmic-import: VQoD-GsFScD4qB/component
import SlideBullet from "../../SlideBullet"; // plasmic-import: DzQ1Cxjuuc37kr/component
import SearchDropdown from "../../SearchDropdown"; // plasmic-import: cFRzk4goWo2_Nm/component

import { useScreenVariants as useScreenVariantsxe6Z4OYQgGkbgB } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: xe6z4oYQgGkbgB/globalVariant
import { useScreenVariants as useScreenVariantsdtAhV3Us7QyP7 } from "../apoiase_website_mobile_first/PlasmicGlobalVariant__Screen"; // plasmic-import: dtAhV3Us7qyP7/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_blank_project_mobile_first_css from "../apoiase_website_mobile_first/plasmic_apoiase_website_mobile_first.module.css"; // plasmic-import: bFry1ML5XR1ujHJJdSKVcs/projectcss
import projectcss from "./plasmic_apoiase_home_mobile_first.module.css"; // plasmic-import: uHRmC1SQrkfdMqVjfGKf9u/projectcss
import sty from "./PlasmicSearch.module.css"; // plasmic-import: QRAoC0EgvJgG6/css

import ApoiaseIconCheckIcon from "./icons/PlasmicIcon__ApoiaseIconCheck"; // plasmic-import: Mr5axEh571LUti/icon
import ApoiaseIconArrowRightIcon from "./icons/PlasmicIcon__ApoiaseIconArrowRight"; // plasmic-import: V9-fXVC3GD8ubn/icon
import ApoiaseIconStarSmallIcon from "./icons/PlasmicIcon__ApoiaseIconStarSmall"; // plasmic-import: L4ZMw-hR0GLCfX/icon
import ApoiaseIconHeartSelectedIcon from "./icons/PlasmicIcon__ApoiaseIconHeartSelected"; // plasmic-import: zXoW85mfRZ1pQ6/icon

export type PlasmicSearch__VariantMembers = {};

export type PlasmicSearch__VariantsArgs = {};
type VariantPropType = keyof PlasmicSearch__VariantsArgs;
export const PlasmicSearch__VariantProps = new Array<VariantPropType>();

export type PlasmicSearch__ArgsType = {};
type ArgPropType = keyof PlasmicSearch__ArgsType;
export const PlasmicSearch__ArgProps = new Array<ArgPropType>();

export type PlasmicSearch__OverridesType = {
  dynamicSearch?: p.Flex<"div">;
  inputText?: p.Flex<"input">;
  button?: p.Flex<typeof Button>;
  svg?: p.Flex<"svg">;
  campaignDisplay?: p.Flex<"div">;
  tabSelector?: p.Flex<"div">;
  startIcon?: p.Flex<"svg">;
  startIcon2?: p.Flex<"svg">;
  endIcon2?: p.Flex<"svg">;
  startIcon3?: p.Flex<"svg">;
  endIcon3?: p.Flex<"svg">;
  startIcon4?: p.Flex<"svg">;
  endIcon4?: p.Flex<"svg">;
  campaignGallery?: p.Flex<"div">;
  campaignColumn?: p.Flex<"div">;
  startIcon5?: p.Flex<"svg">;
  endIcon5?: p.Flex<"svg">;
  startIcon6?: p.Flex<"svg">;
  endIcon6?: p.Flex<"svg">;
  startIcon7?: p.Flex<"svg">;
  endIcon7?: p.Flex<"svg">;
  slideBullet?: p.Flex<typeof SlideBullet>;
  searchDropdown?: p.Flex<typeof SearchDropdown>;
};

export interface DefaultSearchProps {
  className?: string;
}

export const defaultSearch__Args: Partial<PlasmicSearch__ArgsType> = {};

function PlasmicSearch__RenderFunc(props: {
  variants: PlasmicSearch__VariantsArgs;
  args: PlasmicSearch__ArgsType;
  overrides: PlasmicSearch__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultSearch__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const [isDynamicSearchFocusWithin, triggerDynamicSearchFocusWithinProps] =
    useTrigger("useFocusedWithin", {});
  const triggers = {
    focusWithin_dynamicSearch: isDynamicSearchFocusWithin
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsxe6Z4OYQgGkbgB(),
    screen: useScreenVariantsdtAhV3Us7QyP7()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"dynamicSearch"}
      data-plasmic-override={overrides.dynamicSearch}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_blank_project_mobile_first_css.plasmic_tokens,
        sty.dynamicSearch
      )}
      data-plasmic-trigger-props={[triggerDynamicSearchFocusWithinProps]}
    >
      {true ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__ziRt5)}
        >
          <SearchInput
            className={classNames("__wab_instance", sty.searchInput__grCyo)}
            inputText={
              <input
                data-plasmic-name={"inputText"}
                data-plasmic-override={overrides.inputText}
                className={classNames(
                  projectcss.all,
                  projectcss.input,
                  sty.inputText
                )}
                placeholder={"Digite o que deseja procurar..." as const}
                size={1 as const}
                type={"text" as const}
                value={"" as const}
              />
            }
          />

          {(triggers.focusWithin_dynamicSearch ? true : true) ? (
            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              color={"white" as const}
              endIcon={
                <ApoiaseIconArrowRightIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />
              }
              showEndIcon={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xJsRt
                )}
              >
                {"Ver todas as campanhas "}
              </div>
            </Button>
          ) : null}
        </p.Stack>
      ) : null}
      {(triggers.focusWithin_dynamicSearch ? false : true) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"campaignDisplay"}
          data-plasmic-override={overrides.campaignDisplay}
          hasGap={true}
          className={classNames(projectcss.all, sty.campaignDisplay)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"tabSelector"}
            data-plasmic-override={overrides.tabSelector}
            hasGap={true}
            className={classNames(projectcss.all, sty.tabSelector)}
          >
            <TabItem
              className={classNames("__wab_instance", sty.tabItem__rztnA)}
              color={"whiteWYellow" as const}
              sizes={["small"]}
              startIcon={true}
              startIconSpace={
                <ApoiaseIconStarSmallIcon
                  data-plasmic-name={"startIcon"}
                  data-plasmic-override={overrides.startIcon}
                  className={classNames(projectcss.all, sty.startIcon)}
                  role={"img"}
                />
              }
              title={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kviyd
                  )}
                >
                  {"Destaque"}
                </div>
              }
            />

            <TabItem
              className={classNames("__wab_instance", sty.tabItem__sEd2E)}
              endIconSpace={
                <svg
                  data-plasmic-name={"endIcon2"}
                  data-plasmic-override={overrides.endIcon2}
                  className={classNames(projectcss.all, sty.endIcon2)}
                  role={"img"}
                />
              }
              sizes={["small"]}
              startIconSpace={
                <svg
                  data-plasmic-name={"startIcon2"}
                  data-plasmic-override={overrides.startIcon2}
                  className={classNames(projectcss.all, sty.startIcon2)}
                  role={"img"}
                />
              }
              title={"YouTube"}
            />

            <TabItem
              className={classNames("__wab_instance", sty.tabItem__roBsx)}
              endIconSpace={
                <svg
                  data-plasmic-name={"endIcon3"}
                  data-plasmic-override={overrides.endIcon3}
                  className={classNames(projectcss.all, sty.endIcon3)}
                  role={"img"}
                />
              }
              sizes={["small"]}
              startIconSpace={
                <svg
                  data-plasmic-name={"startIcon3"}
                  data-plasmic-override={overrides.startIcon3}
                  className={classNames(projectcss.all, sty.startIcon3)}
                  role={"img"}
                />
              }
              title={"Podcasts"}
            />

            <TabItem
              className={classNames("__wab_instance", sty.tabItem__zFmyG)}
              endIconSpace={
                <svg
                  data-plasmic-name={"endIcon4"}
                  data-plasmic-override={overrides.endIcon4}
                  className={classNames(projectcss.all, sty.endIcon4)}
                  role={"img"}
                />
              }
              sizes={["small"]}
              startIconSpace={
                <svg
                  data-plasmic-name={"startIcon4"}
                  data-plasmic-override={overrides.startIcon4}
                  className={classNames(projectcss.all, sty.startIcon4)}
                  role={"img"}
                />
              }
              title={"Animação"}
            />
          </p.Stack>

          {true ? (
            <div
              data-plasmic-name={"campaignGallery"}
              data-plasmic-override={overrides.campaignGallery}
              className={classNames(projectcss.all, sty.campaignGallery)}
            >
              {(
                hasVariant(globalVariants, "screen", "desktop") ? true : true
              ) ? (
                <CampaignCard
                  className={classNames(
                    "__wab_instance",
                    sty.campaignCard__t073P
                  )}
                  withoutGoal={true}
                />
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "desktop") ? true : true
              ) ? (
                <CampaignCard
                  className={classNames(
                    "__wab_instance",
                    sty.campaignCard__ylhOp
                  )}
                  metaDescription={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0FNYg
                      )}
                    >
                      {"arrecadados da meta estabelecida"}
                    </div>
                  }
                  pontual={true}
                />
              ) : null}

              <CampaignCard
                className={classNames(
                  "__wab_instance",
                  sty.campaignCard__rgD7K
                )}
                withCountDays={true}
              />
            </div>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"campaignColumn"}
              data-plasmic-override={overrides.campaignColumn}
              hasGap={true}
              className={classNames(projectcss.all, sty.campaignColumn)}
            >
              <div className={classNames(projectcss.all, sty.column__jjsuu)}>
                {true ? (
                  <CampaignCard
                    className={classNames(
                      "__wab_instance",
                      sty.campaignCard__vv9X7
                    )}
                    endIconSpace={
                      <svg
                        data-plasmic-name={"endIcon5"}
                        data-plasmic-override={overrides.endIcon5}
                        className={classNames(projectcss.all, sty.endIcon5)}
                        role={"img"}
                      />
                    }
                    slot2={"20214"}
                    startIconSpace={
                      <svg
                        data-plasmic-name={"startIcon5"}
                        data-plasmic-override={overrides.startIcon5}
                        className={classNames(projectcss.all, sty.startIcon5)}
                        role={"img"}
                      />
                    }
                    withoutGoal={true}
                  />
                ) : null}
                {true ? (
                  <CampaignCard
                    className={classNames(
                      "__wab_instance",
                      sty.campaignCard__to1D3
                    )}
                    endIconSpace={
                      <svg
                        data-plasmic-name={"endIcon6"}
                        data-plasmic-override={overrides.endIcon6}
                        className={classNames(projectcss.all, sty.endIcon6)}
                        role={"img"}
                      />
                    }
                    metaDescription={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sp4L
                        )}
                      >
                        {"arrecadados da meta estabelecida"}
                      </div>
                    }
                    pontual={true}
                    startIconSpace={
                      <svg
                        data-plasmic-name={"startIcon6"}
                        data-plasmic-override={overrides.startIcon6}
                        className={classNames(projectcss.all, sty.startIcon6)}
                        role={"img"}
                      />
                    }
                  />
                ) : null}
                {true ? (
                  <CampaignCard
                    className={classNames(
                      "__wab_instance",
                      sty.campaignCard__gR3Mk
                    )}
                    endIconSpace={
                      <svg
                        data-plasmic-name={"endIcon7"}
                        data-plasmic-override={overrides.endIcon7}
                        className={classNames(projectcss.all, sty.endIcon7)}
                        role={"img"}
                      />
                    }
                    startIconSpace={
                      <svg
                        data-plasmic-name={"startIcon7"}
                        data-plasmic-override={overrides.startIcon7}
                        className={classNames(projectcss.all, sty.startIcon7)}
                        role={"img"}
                      />
                    }
                    withCountDays={true}
                  />
                ) : null}
              </div>

              <div className={classNames(projectcss.all, sty.column__b4CAp)} />

              <div className={classNames(projectcss.all, sty.column__uIo4)} />
            </p.Stack>
          ) : null}
          {true ? (
            <SlideBullet
              data-plasmic-name={"slideBullet"}
              data-plasmic-override={overrides.slideBullet}
              className={classNames("__wab_instance", sty.slideBullet)}
            />
          ) : null}
        </p.Stack>
      ) : null}
      {(triggers.focusWithin_dynamicSearch ? true : false) ? (
        <SearchDropdown
          data-plasmic-name={"searchDropdown"}
          data-plasmic-override={overrides.searchDropdown}
          className={classNames("__wab_instance", sty.searchDropdown)}
        />
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  dynamicSearch: [
    "dynamicSearch",
    "inputText",
    "button",
    "svg",
    "campaignDisplay",
    "tabSelector",
    "startIcon",
    "startIcon2",
    "endIcon2",
    "startIcon3",
    "endIcon3",
    "startIcon4",
    "endIcon4",
    "campaignGallery",
    "campaignColumn",
    "startIcon5",
    "endIcon5",
    "startIcon6",
    "endIcon6",
    "startIcon7",
    "endIcon7",
    "slideBullet",
    "searchDropdown"
  ],
  inputText: ["inputText"],
  button: ["button", "svg"],
  svg: ["svg"],
  campaignDisplay: [
    "campaignDisplay",
    "tabSelector",
    "startIcon",
    "startIcon2",
    "endIcon2",
    "startIcon3",
    "endIcon3",
    "startIcon4",
    "endIcon4",
    "campaignGallery",
    "campaignColumn",
    "startIcon5",
    "endIcon5",
    "startIcon6",
    "endIcon6",
    "startIcon7",
    "endIcon7",
    "slideBullet"
  ],
  tabSelector: [
    "tabSelector",
    "startIcon",
    "startIcon2",
    "endIcon2",
    "startIcon3",
    "endIcon3",
    "startIcon4",
    "endIcon4"
  ],
  startIcon: ["startIcon"],
  startIcon2: ["startIcon2"],
  endIcon2: ["endIcon2"],
  startIcon3: ["startIcon3"],
  endIcon3: ["endIcon3"],
  startIcon4: ["startIcon4"],
  endIcon4: ["endIcon4"],
  campaignGallery: ["campaignGallery"],
  campaignColumn: [
    "campaignColumn",
    "startIcon5",
    "endIcon5",
    "startIcon6",
    "endIcon6",
    "startIcon7",
    "endIcon7"
  ],
  startIcon5: ["startIcon5"],
  endIcon5: ["endIcon5"],
  startIcon6: ["startIcon6"],
  endIcon6: ["endIcon6"],
  startIcon7: ["startIcon7"],
  endIcon7: ["endIcon7"],
  slideBullet: ["slideBullet"],
  searchDropdown: ["searchDropdown"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  dynamicSearch: "div";
  inputText: "input";
  button: typeof Button;
  svg: "svg";
  campaignDisplay: "div";
  tabSelector: "div";
  startIcon: "svg";
  startIcon2: "svg";
  endIcon2: "svg";
  startIcon3: "svg";
  endIcon3: "svg";
  startIcon4: "svg";
  endIcon4: "svg";
  campaignGallery: "div";
  campaignColumn: "div";
  startIcon5: "svg";
  endIcon5: "svg";
  startIcon6: "svg";
  endIcon6: "svg";
  startIcon7: "svg";
  endIcon7: "svg";
  slideBullet: typeof SlideBullet;
  searchDropdown: typeof SearchDropdown;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSearch__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSearch__VariantsArgs;
    args?: PlasmicSearch__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSearch__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSearch__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSearch__ArgProps,
      internalVariantPropNames: PlasmicSearch__VariantProps
    });

    return PlasmicSearch__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "dynamicSearch") {
    func.displayName = "PlasmicSearch";
  } else {
    func.displayName = `PlasmicSearch.${nodeName}`;
  }
  return func;
}

export const PlasmicSearch = Object.assign(
  // Top-level PlasmicSearch renders the root element
  makeNodeComponent("dynamicSearch"),
  {
    // Helper components rendering sub-elements
    inputText: makeNodeComponent("inputText"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    campaignDisplay: makeNodeComponent("campaignDisplay"),
    tabSelector: makeNodeComponent("tabSelector"),
    startIcon: makeNodeComponent("startIcon"),
    startIcon2: makeNodeComponent("startIcon2"),
    endIcon2: makeNodeComponent("endIcon2"),
    startIcon3: makeNodeComponent("startIcon3"),
    endIcon3: makeNodeComponent("endIcon3"),
    startIcon4: makeNodeComponent("startIcon4"),
    endIcon4: makeNodeComponent("endIcon4"),
    campaignGallery: makeNodeComponent("campaignGallery"),
    campaignColumn: makeNodeComponent("campaignColumn"),
    startIcon5: makeNodeComponent("startIcon5"),
    endIcon5: makeNodeComponent("endIcon5"),
    startIcon6: makeNodeComponent("startIcon6"),
    endIcon6: makeNodeComponent("endIcon6"),
    startIcon7: makeNodeComponent("startIcon7"),
    endIcon7: makeNodeComponent("endIcon7"),
    slideBullet: makeNodeComponent("slideBullet"),
    searchDropdown: makeNodeComponent("searchDropdown"),

    // Metadata about props expected for PlasmicSearch
    internalVariantProps: PlasmicSearch__VariantProps,
    internalArgProps: PlasmicSearch__ArgProps
  }
);

export default PlasmicSearch;
/* prettier-ignore-end */
