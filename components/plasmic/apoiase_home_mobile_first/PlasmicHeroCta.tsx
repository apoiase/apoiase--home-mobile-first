// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uHRmC1SQrkfdMqVjfGKf9u
// Component: ozAM-MtCORwPgF
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: 9qvF8EbiZQKemF/component

import { useScreenVariants as useScreenVariantsxe6Z4OYQgGkbgB } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: xe6z4oYQgGkbgB/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_blank_project_mobile_first_css from "../apoiase_website_mobile_first/plasmic_apoiase_website_mobile_first.module.css"; // plasmic-import: bFry1ML5XR1ujHJJdSKVcs/projectcss
import projectcss from "./plasmic_apoiase_home_mobile_first.module.css"; // plasmic-import: uHRmC1SQrkfdMqVjfGKf9u/projectcss
import sty from "./PlasmicHeroCta.module.css"; // plasmic-import: ozAM-MtCORwPgF/css

import ApoiaseIconCheckIcon from "./icons/PlasmicIcon__ApoiaseIconCheck"; // plasmic-import: Mr5axEh571LUti/icon
import ApoiaseIconArrowRightIcon from "./icons/PlasmicIcon__ApoiaseIconArrowRight"; // plasmic-import: V9-fXVC3GD8ubn/icon

export type PlasmicHeroCta__VariantMembers = {
  withImage: "withImage";
};

export type PlasmicHeroCta__VariantsArgs = {
  withImage?: SingleBooleanChoiceArg<"withImage">;
};

type VariantPropType = keyof PlasmicHeroCta__VariantsArgs;
export const PlasmicHeroCta__VariantProps = new Array<VariantPropType>(
  "withImage"
);

export type PlasmicHeroCta__ArgsType = {
  headline?: React.ReactNode;
  subtitle?: React.ReactNode;
};

type ArgPropType = keyof PlasmicHeroCta__ArgsType;
export const PlasmicHeroCta__ArgProps = new Array<ArgPropType>(
  "headline",
  "subtitle"
);

export type PlasmicHeroCta__OverridesType = {
  heroCta?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  apoiaseTitleSeparator?: p.Flex<"span">;
  h4?: p.Flex<"h4">;
  button?: p.Flex<typeof Button>;
  img?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultHeroCtaProps {
  headline?: React.ReactNode;
  subtitle?: React.ReactNode;
  withImage?: SingleBooleanChoiceArg<"withImage">;
  className?: string;
}

export const defaultHeroCta__Args: Partial<PlasmicHeroCta__ArgsType> = {};

function PlasmicHeroCta__RenderFunc(props: {
  variants: PlasmicHeroCta__VariantsArgs;
  args: PlasmicHeroCta__ArgsType;
  overrides: PlasmicHeroCta__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultHeroCta__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsxe6Z4OYQgGkbgB()
  });

  return (
    true ? (
      <p.Stack
        as={"div"}
        data-plasmic-name={"heroCta"}
        data-plasmic-override={overrides.heroCta}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_blank_project_mobile_first_css.plasmic_tokens,
          sty.heroCta
        )}
      >
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ul8V0)}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(projectcss.all, projectcss.h1, sty.h1)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iCwt3
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>
                        {"Financiamento \nColetivo pra quem "}
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#DB2328" }}
                      >
                        {"Faz"}
                      </span>
                      <React.Fragment>{" acontecer "}</React.Fragment>
                    </React.Fragment>
                  </div>
                ),

                value: args.headline
              })}
            </h1>

            <span
              data-plasmic-name={"apoiaseTitleSeparator"}
              data-plasmic-override={overrides.apoiaseTitleSeparator}
              className={classNames(
                projectcss.all,
                projectcss.span,
                sty.apoiaseTitleSeparator
              )}
            />

            <h4
              data-plasmic-name={"h4"}
              data-plasmic-override={overrides.h4}
              className={classNames(projectcss.all, projectcss.h4, sty.h4)}
            >
              {p.renderPlasmicSlot({
                defaultContents:
                  "Aumente o poder de realização do seu projeto com a potência do Crowdfunding.",
                value: args.subtitle,
                className: classNames(sty.slotTargetSubtitle)
              })}
            </h4>

            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              color={"red" as const}
            >
              {"Criar campanha"}
            </Button>
          </p.Stack>
        ) : null}
        {(hasVariant(variants, "withImage", "withImage") ? true : false) ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___8HRyK, {
              [sty.freeBoxwithImage___8HRyKVwYRw]: hasVariant(
                variants,
                "withImage",
                "withImage"
              )
            })}
          >
            <p.PlasmicImg
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"100%" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"100%" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/apoiase_home_mobile_first/images/apoiaseIllustrationContinuasvg.svg",
                fullWidth: 189,
                fullHeight: 150,
                aspectRatio: 1.257485
              }}
            />
          </p.Stack>
        ) : null}
      </p.Stack>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  heroCta: ["heroCta", "h1", "apoiaseTitleSeparator", "h4", "button", "img"],
  h1: ["h1"],
  apoiaseTitleSeparator: ["apoiaseTitleSeparator"],
  h4: ["h4"],
  button: ["button"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  heroCta: "div";
  h1: "h1";
  apoiaseTitleSeparator: "span";
  h4: "h4";
  button: typeof Button;
  img: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeroCta__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeroCta__VariantsArgs;
    args?: PlasmicHeroCta__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeroCta__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeroCta__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeroCta__ArgProps,
      internalVariantPropNames: PlasmicHeroCta__VariantProps
    });

    return PlasmicHeroCta__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "heroCta") {
    func.displayName = "PlasmicHeroCta";
  } else {
    func.displayName = `PlasmicHeroCta.${nodeName}`;
  }
  return func;
}

export const PlasmicHeroCta = Object.assign(
  // Top-level PlasmicHeroCta renders the root element
  makeNodeComponent("heroCta"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    apoiaseTitleSeparator: makeNodeComponent("apoiaseTitleSeparator"),
    h4: makeNodeComponent("h4"),
    button: makeNodeComponent("button"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicHeroCta
    internalVariantProps: PlasmicHeroCta__VariantProps,
    internalArgProps: PlasmicHeroCta__ArgProps
  }
);

export default PlasmicHeroCta;
/* prettier-ignore-end */
