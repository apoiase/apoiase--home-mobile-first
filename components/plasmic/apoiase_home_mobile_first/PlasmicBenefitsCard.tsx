// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uHRmC1SQrkfdMqVjfGKf9u
// Component: AcQyntlRHBwn79
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsxe6Z4OYQgGkbgB } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: xe6z4oYQgGkbgB/globalVariant
import { useScreenVariants as useScreenVariantsdtAhV3Us7QyP7 } from "../apoiase_website_mobile_first/PlasmicGlobalVariant__Screen"; // plasmic-import: dtAhV3Us7qyP7/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_blank_project_mobile_first_css from "../apoiase_website_mobile_first/plasmic_apoiase_website_mobile_first.module.css"; // plasmic-import: bFry1ML5XR1ujHJJdSKVcs/projectcss
import projectcss from "./plasmic_apoiase_home_mobile_first.module.css"; // plasmic-import: uHRmC1SQrkfdMqVjfGKf9u/projectcss
import sty from "./PlasmicBenefitsCard.module.css"; // plasmic-import: AcQyntlRHBwn79/css

import ApoiaseIconMessagesIcon from "./icons/PlasmicIcon__ApoiaseIconMessages"; // plasmic-import: Y8u2bYxodiYauD/icon

export type PlasmicBenefitsCard__VariantMembers = {
  vertical: "vertical";
};

export type PlasmicBenefitsCard__VariantsArgs = {
  vertical?: SingleBooleanChoiceArg<"vertical">;
};

type VariantPropType = keyof PlasmicBenefitsCard__VariantsArgs;
export const PlasmicBenefitsCard__VariantProps = new Array<VariantPropType>(
  "vertical"
);

export type PlasmicBenefitsCard__ArgsType = {
  icon?: React.ReactNode;
  title?: React.ReactNode;
  description?: React.ReactNode;
};

type ArgPropType = keyof PlasmicBenefitsCard__ArgsType;
export const PlasmicBenefitsCard__ArgProps = new Array<ArgPropType>(
  "icon",
  "title",
  "description"
);

export type PlasmicBenefitsCard__OverridesType = {
  benefitsCard?: p.Flex<"div">;
  benefitsIcon?: p.Flex<"div">;
  benefitsInfo?: p.Flex<"div">;
  h4?: p.Flex<"h4">;
  p?: p.Flex<"p">;
};

export interface DefaultBenefitsCardProps {
  icon?: React.ReactNode;
  title?: React.ReactNode;
  description?: React.ReactNode;
  vertical?: SingleBooleanChoiceArg<"vertical">;
  className?: string;
}

export const defaultBenefitsCard__Args: Partial<PlasmicBenefitsCard__ArgsType> =
  {};

function PlasmicBenefitsCard__RenderFunc(props: {
  variants: PlasmicBenefitsCard__VariantsArgs;
  args: PlasmicBenefitsCard__ArgsType;
  overrides: PlasmicBenefitsCard__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultBenefitsCard__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsxe6Z4OYQgGkbgB(),
    screen: useScreenVariantsdtAhV3Us7QyP7()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"benefitsCard"}
      data-plasmic-override={overrides.benefitsCard}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_blank_project_mobile_first_css.plasmic_tokens,
        sty.benefitsCard,
        {
          [sty.benefitsCardvertical]: hasVariant(
            variants,
            "vertical",
            "vertical"
          )
        }
      )}
    >
      {true ? (
        <div
          data-plasmic-name={"benefitsIcon"}
          data-plasmic-override={overrides.benefitsIcon}
          className={classNames(projectcss.all, sty.benefitsIcon)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <ApoiaseIconMessagesIcon
                className={classNames(projectcss.all, sty.svg__sgz9P)}
                role={"img"}
              />
            ),

            value: args.icon
          })}
        </div>
      ) : null}

      <p.Stack
        as={"div"}
        data-plasmic-name={"benefitsInfo"}
        data-plasmic-override={overrides.benefitsInfo}
        hasGap={true}
        className={classNames(projectcss.all, sty.benefitsInfo, {
          [sty.benefitsInfovertical]: hasVariant(
            variants,
            "vertical",
            "vertical"
          )
        })}
      >
        <h4
          data-plasmic-name={"h4"}
          data-plasmic-override={overrides.h4}
          className={classNames(projectcss.all, projectcss.h4, sty.h4, {
            [sty.h4vertical]: hasVariant(variants, "vertical", "vertical")
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Comunicação direta com seus fãs",
            value: args.title,
            className: classNames(sty.slotTargetTitle, {
              [sty.slotTargetTitlevertical]: hasVariant(
                variants,
                "vertical",
                "vertical"
              )
            })
          })}
        </h4>

        <p
          data-plasmic-name={"p"}
          data-plasmic-override={overrides.p}
          className={classNames(projectcss.all, projectcss.p, sty.p, {
            [sty.pvertical]: hasVariant(variants, "vertical", "vertical")
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents:
              "Com o CHAT da APOIA.se você e sua base de apoiadores(as) se comunicam em tempo real. Mais conexão, interação e engajamento você encontra aqui.",
            value: args.description,
            className: classNames(sty.slotTargetDescription, {
              [sty.slotTargetDescriptionvertical]: hasVariant(
                variants,
                "vertical",
                "vertical"
              )
            })
          })}
        </p>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  benefitsCard: ["benefitsCard", "benefitsIcon", "benefitsInfo", "h4", "p"],
  benefitsIcon: ["benefitsIcon"],
  benefitsInfo: ["benefitsInfo", "h4", "p"],
  h4: ["h4"],
  p: ["p"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  benefitsCard: "div";
  benefitsIcon: "div";
  benefitsInfo: "div";
  h4: "h4";
  p: "p";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBenefitsCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBenefitsCard__VariantsArgs;
    args?: PlasmicBenefitsCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBenefitsCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBenefitsCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBenefitsCard__ArgProps,
      internalVariantPropNames: PlasmicBenefitsCard__VariantProps
    });

    return PlasmicBenefitsCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "benefitsCard") {
    func.displayName = "PlasmicBenefitsCard";
  } else {
    func.displayName = `PlasmicBenefitsCard.${nodeName}`;
  }
  return func;
}

export const PlasmicBenefitsCard = Object.assign(
  // Top-level PlasmicBenefitsCard renders the root element
  makeNodeComponent("benefitsCard"),
  {
    // Helper components rendering sub-elements
    benefitsIcon: makeNodeComponent("benefitsIcon"),
    benefitsInfo: makeNodeComponent("benefitsInfo"),
    h4: makeNodeComponent("h4"),
    p: makeNodeComponent("p"),

    // Metadata about props expected for PlasmicBenefitsCard
    internalVariantProps: PlasmicBenefitsCard__VariantProps,
    internalArgProps: PlasmicBenefitsCard__ArgProps
  }
);

export default PlasmicBenefitsCard;
/* prettier-ignore-end */
