// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uHRmC1SQrkfdMqVjfGKf9u
// Component: B_NoenvngFrRGS
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import BrandLogo from "../../BrandLogo"; // plasmic-import: vv-FUmdWgjNGov/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_blank_project_mobile_first_css from "../apoiase_website_mobile_first/plasmic_apoiase_website_mobile_first.module.css"; // plasmic-import: bFry1ML5XR1ujHJJdSKVcs/projectcss
import projectcss from "./plasmic_apoiase_home_mobile_first.module.css"; // plasmic-import: uHRmC1SQrkfdMqVjfGKf9u/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: B_NoenvngFrRGS/css

import ApoiaseIconTwitterIcon from "./icons/PlasmicIcon__ApoiaseIconTwitter"; // plasmic-import: -lvHe9UWv1Py4Z/icon
import ApoiaseIconGithubIcon from "./icons/PlasmicIcon__ApoiaseIconGithub"; // plasmic-import: 0KhyeawtSIcc0n/icon
import ApoiaseIconLinkedinIcon from "./icons/PlasmicIcon__ApoiaseIconLinkedin"; // plasmic-import: fzMi5zsxhvnv3L/icon

export type PlasmicFooter__VariantMembers = {};

export type PlasmicFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooter__VariantsArgs;
export const PlasmicFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicFooter__ArgsType = {};
type ArgPropType = keyof PlasmicFooter__ArgsType;
export const PlasmicFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicFooter__OverridesType = {
  root?: p.Flex<"footer">;
  brandLogo?: p.Flex<typeof BrandLogo>;
  h6?: p.Flex<"h6">;
};

export interface DefaultFooterProps {
  className?: string;
}

export const defaultFooter__Args: Partial<PlasmicFooter__ArgsType> = {};

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs;
  args: PlasmicFooter__ArgsType;
  overrides: PlasmicFooter__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultFooter__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <footer
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_blank_project_mobile_first_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__tFrtk)}>
        <BrandLogo
          data-plasmic-name={"brandLogo"}
          data-plasmic-override={overrides.brandLogo}
          className={classNames("__wab_instance", sty.brandLogo)}
          white={true}
        />
      </div>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__gt024)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__fnhl)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__e8BzQ
            )}
          >
            {"Ajuda"}
          </div>

          <p.Stack
            as={p.PlasmicLink}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__wScWd
            )}
            component={Link}
            platform={"nextjs"}
          >
            {false ? (
              <svg
                className={classNames(projectcss.all, sty.svg__cLc7R)}
                role={"img"}
              />
            ) : null}

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__iiEw9
              )}
              component={Link}
              href={"https://suporte.apoia.se" as const}
              platform={"nextjs"}
              target={"_blank" as const}
            >
              {"Central de Suporte"}
            </p.PlasmicLink>

            {false ? (
              <svg
                className={classNames(projectcss.all, sty.svg__ab8X1)}
                role={"img"}
              />
            ) : null}
          </p.Stack>

          <p.Stack
            as={p.PlasmicLink}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__bl255
            )}
            component={Link}
            platform={"nextjs"}
          >
            {false ? (
              <svg
                className={classNames(projectcss.all, sty.svg__z3CKo)}
                role={"img"}
              />
            ) : null}

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__krlZh
              )}
            >
              {"Perguntas Frequentes"}
            </div>

            {false ? (
              <svg
                className={classNames(projectcss.all, sty.svg__ax3I4)}
                role={"img"}
              />
            ) : null}
          </p.Stack>

          <p.Stack
            as={p.PlasmicLink}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__rbFpJ
            )}
            component={Link}
            platform={"nextjs"}
          >
            {false ? (
              <svg
                className={classNames(projectcss.all, sty.svg__cptvD)}
                role={"img"}
              />
            ) : null}

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xgAbJ
              )}
            >
              {"Taxa da APOIA.se"}
            </div>

            {false ? (
              <svg
                className={classNames(projectcss.all, sty.svg__xN6Xk)}
                role={"img"}
              />
            ) : null}
          </p.Stack>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__eEzj6)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___50Gkn
            )}
          >
            {"Ajuda"}
          </div>

          <p.Stack
            as={p.PlasmicLink}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link___8SzMi
            )}
            component={Link}
            platform={"nextjs"}
          >
            {false ? (
              <svg
                className={classNames(projectcss.all, sty.svg__wKuhi)}
                role={"img"}
              />
            ) : null}

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mfnKf
              )}
            >
              {"Termos de Uso"}
            </div>

            {false ? (
              <svg
                className={classNames(projectcss.all, sty.svg__ujITu)}
                role={"img"}
              />
            ) : null}
          </p.Stack>

          <p.Stack
            as={p.PlasmicLink}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__gwbJt
            )}
            component={Link}
            platform={"nextjs"}
          >
            {false ? (
              <svg
                className={classNames(projectcss.all, sty.svg__vnkCv)}
                role={"img"}
              />
            ) : null}

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mfamb
              )}
            >
              {"Mural da TransparÃªncia"}
            </div>

            {false ? (
              <svg
                className={classNames(projectcss.all, sty.svg__xkdO6)}
                role={"img"}
              />
            ) : null}
          </p.Stack>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__zho5U)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__lu0Qv
            )}
          >
            {"Sobre"}
          </div>

          <p.Stack
            as={p.PlasmicLink}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__u7Uin
            )}
            component={Link}
            platform={"nextjs"}
          >
            {false ? (
              <svg
                className={classNames(projectcss.all, sty.svg__o5Fu6)}
                role={"img"}
              />
            ) : null}

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zoZoz
              )}
            >
              {"Quem somos"}
            </div>

            {false ? (
              <svg
                className={classNames(projectcss.all, sty.svg__vshlp)}
                role={"img"}
              />
            ) : null}
          </p.Stack>

          <p.Stack
            as={p.PlasmicLink}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link___2AqIg
            )}
            component={Link}
            platform={"nextjs"}
          >
            {false ? (
              <svg
                className={classNames(projectcss.all, sty.svg___9Wj5A)}
                role={"img"}
              />
            ) : null}

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xG8GJ
              )}
            >
              {"Blog"}
            </div>

            {false ? (
              <svg
                className={classNames(projectcss.all, sty.svg__j1SOi)}
                role={"img"}
              />
            ) : null}
          </p.Stack>

          <p.Stack
            as={p.PlasmicLink}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__r5ARw
            )}
            component={Link}
            platform={"nextjs"}
          >
            {false ? (
              <svg
                className={classNames(projectcss.all, sty.svg__aqUz6)}
                role={"img"}
              />
            ) : null}

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__weH0
              )}
            >
              {"Trabalhe conosco"}
            </div>

            {false ? (
              <svg
                className={classNames(projectcss.all, sty.svg__qF7XJ)}
                role={"img"}
              />
            ) : null}
          </p.Stack>

          <p.Stack
            as={p.PlasmicLink}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__cJcw0
            )}
            component={Link}
            platform={"nextjs"}
          >
            {false ? (
              <svg
                className={classNames(projectcss.all, sty.svg__qfBye)}
                role={"img"}
              />
            ) : null}

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__idNsu
              )}
            >
              {"Novidades da Plataforma"}
            </div>

            {false ? (
              <svg
                className={classNames(projectcss.all, sty.svg__cIPrN)}
                role={"img"}
              />
            ) : null}
          </p.Stack>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__tNqcL)}
        >
          <h6
            data-plasmic-name={"h6"}
            data-plasmic-override={overrides.h6}
            className={classNames(
              projectcss.all,
              projectcss.h6,
              projectcss.__wab_text,
              sty.h6
            )}
          >
            {"Siga-nos"}
          </h6>

          <ApoiaseIconTwitterIcon
            className={classNames(projectcss.all, sty.svg__bileH)}
            role={"img"}
          />

          <ApoiaseIconGithubIcon
            className={classNames(projectcss.all, sty.svg__t2On3)}
            role={"img"}
          />

          <ApoiaseIconLinkedinIcon
            className={classNames(projectcss.all, sty.svg__bSggA)}
            role={"img"}
          />
        </p.Stack>
      </p.Stack>

      <div className={classNames(projectcss.all, sty.freeBox___2Pr2)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__yDtMp
          )}
        >
          {"Onde pÃºblico e Fazedores andam juntos | 2022"}
        </div>
      </div>
    </footer>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "brandLogo", "h6"],
  brandLogo: ["brandLogo"],
  h6: ["h6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "footer";
  brandLogo: typeof BrandLogo;
  h6: "h6";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFooter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFooter__ArgProps,
      internalVariantPropNames: PlasmicFooter__VariantProps
    });

    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    brandLogo: makeNodeComponent("brandLogo"),
    h6: makeNodeComponent("h6"),

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
