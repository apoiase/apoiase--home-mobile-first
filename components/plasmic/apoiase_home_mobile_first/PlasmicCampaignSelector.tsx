// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uHRmC1SQrkfdMqVjfGKf9u
// Component: 5hHmsy_Q3GRqGM
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import CampaignLogo from "../../CampaignLogo"; // plasmic-import: P3nA8obphdgioX/component
import Button from "../../Button"; // plasmic-import: 9qvF8EbiZQKemF/component
import Separator from "../../Separator"; // plasmic-import: eIUXHfvLiN3HP3/component
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms"; // plasmic-import: 8N9-WfZSaq/codeComponent
import BenefitsItem from "../../BenefitsItem"; // plasmic-import: D76PYThZLkOlj5/component
import { CmsRowField } from "@plasmicpkgs/plasmic-cms"; // plasmic-import: w6HdOz-Pcn/codeComponent

import { useScreenVariants as useScreenVariantsxe6Z4OYQgGkbgB } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: xe6z4oYQgGkbgB/globalVariant
import { useScreenVariants as useScreenVariantsdtAhV3Us7QyP7 } from "../apoiase_website_mobile_first/PlasmicGlobalVariant__Screen"; // plasmic-import: dtAhV3Us7qyP7/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_blank_project_mobile_first_css from "../apoiase_website_mobile_first/plasmic_apoiase_website_mobile_first.module.css"; // plasmic-import: bFry1ML5XR1ujHJJdSKVcs/projectcss
import projectcss from "./plasmic_apoiase_home_mobile_first.module.css"; // plasmic-import: uHRmC1SQrkfdMqVjfGKf9u/projectcss
import sty from "./PlasmicCampaignSelector.module.css"; // plasmic-import: 5hHmsy_Q3GRqGM/css

import ApoiaseIconCheckIcon from "./icons/PlasmicIcon__ApoiaseIconCheck"; // plasmic-import: Mr5axEh571LUti/icon
import ApoiaseIconArrowRightIcon from "./icons/PlasmicIcon__ApoiaseIconArrowRight"; // plasmic-import: V9-fXVC3GD8ubn/icon

export type PlasmicCampaignSelector__VariantMembers = {
  pontual: "pontual";
};

export type PlasmicCampaignSelector__VariantsArgs = {
  pontual?: SingleBooleanChoiceArg<"pontual">;
};

type VariantPropType = keyof PlasmicCampaignSelector__VariantsArgs;
export const PlasmicCampaignSelector__VariantProps = new Array<VariantPropType>(
  "pontual"
);

export type PlasmicCampaignSelector__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicCampaignSelector__ArgsType;
export const PlasmicCampaignSelector__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicCampaignSelector__OverridesType = {
  campaignSelector?: p.Flex<"div">;
  campaignCta?: p.Flex<"div">;
  campaignLogo?: p.Flex<typeof CampaignLogo>;
  button?: p.Flex<typeof Button>;
  separator?: p.Flex<typeof Separator>;
  campaignBenefits?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultCampaignSelectorProps {
  children?: React.ReactNode;
  pontual?: SingleBooleanChoiceArg<"pontual">;
  className?: string;
}

export const defaultCampaignSelector__Args: Partial<PlasmicCampaignSelector__ArgsType> =
  {};

function PlasmicCampaignSelector__RenderFunc(props: {
  variants: PlasmicCampaignSelector__VariantsArgs;
  args: PlasmicCampaignSelector__ArgsType;
  overrides: PlasmicCampaignSelector__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultCampaignSelector__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const [isCampaignSelectorHover, triggerCampaignSelectorHoverProps] =
    useTrigger("useHover", {});
  const triggers = {
    hover_campaignSelector: isCampaignSelectorHover
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsxe6Z4OYQgGkbgB(),
    screen: useScreenVariantsdtAhV3Us7QyP7()
  });

  return (
    <div
      data-plasmic-name={"campaignSelector"}
      data-plasmic-override={overrides.campaignSelector}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_blank_project_mobile_first_css.plasmic_tokens,
        sty.campaignSelector,
        {
          [sty.campaignSelectorpontual]: hasVariant(
            variants,
            "pontual",
            "pontual"
          )
        }
      )}
      data-plasmic-trigger-props={[triggerCampaignSelectorHoverProps]}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"campaignCta"}
        data-plasmic-override={overrides.campaignCta}
        hasGap={true}
        className={classNames(projectcss.all, sty.campaignCta, {
          [sty.campaignCtapontual]: hasVariant(variants, "pontual", "pontual")
        })}
      >
        <CampaignLogo
          data-plasmic-name={"campaignLogo"}
          data-plasmic-override={overrides.campaignLogo}
          className={classNames("__wab_instance", sty.campaignLogo, {
            [sty.campaignLogopontual]: hasVariant(
              variants,
              "pontual",
              "pontual"
            )
          })}
          pontual={
            hasVariant(variants, "pontual", "pontual") ? true : undefined
          }
        />

        <Button
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames("__wab_instance", sty.button, {
            [sty.buttonpontual]: hasVariant(variants, "pontual", "pontual")
          })}
          color={
            hasVariant(variants, "pontual", "pontual")
              ? ("green" as const)
              : ("red" as const)
          }
          size={"compact" as const}
        >
          {"Iniciar Campanha"}
        </Button>
      </p.Stack>

      {(triggers.hover_campaignSelector ? true : true) ? (
        <Separator
          data-plasmic-name={"separator"}
          data-plasmic-override={overrides.separator}
          className={classNames("__wab_instance", sty.separator)}
        />
      ) : null}

      <p.Stack
        as={"div"}
        data-plasmic-name={"campaignBenefits"}
        data-plasmic-override={overrides.campaignBenefits}
        hasGap={true}
        className={classNames(projectcss.all, sty.campaignBenefits, {
          [sty.campaignBenefitspontual]: hasVariant(
            variants,
            "pontual",
            "pontual"
          )
        })}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox, {
            [sty.freeBoxpontual]: hasVariant(variants, "pontual", "pontual")
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <CmsQueryRepeater
                className={classNames(
                  "__wab_instance",
                  sty.cmsDataLoader__hTFmn
                )}
                desc={false}
                emptyMessage={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fi0YN
                    )}
                  >
                    {"No matching published entries found."}
                  </div>
                }
                forceEmptyState={false}
                forceLoadingState={false}
                limit={0 as const}
                loadingMessage={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gWa8K
                    )}
                  >
                    {"Loading..."}
                  </div>
                }
                noLayout={true}
                table={"beneficios" as const}
                useDraft={false}
              >
                <BenefitsItem
                  className={classNames(
                    "__wab_instance",
                    sty.benefitsItem___5I3C3
                  )}
                  description={
                    <CmsRowField
                      className={classNames(
                        "__wab_instance",
                        sty.cmsEntryField__awDE
                      )}
                    />
                  }
                />
              </CmsQueryRepeater>
            ),

            value: args.children
          })}
        </p.Stack>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  campaignSelector: [
    "campaignSelector",
    "campaignCta",
    "campaignLogo",
    "button",
    "separator",
    "campaignBenefits",
    "freeBox"
  ],
  campaignCta: ["campaignCta", "campaignLogo", "button"],
  campaignLogo: ["campaignLogo"],
  button: ["button"],
  separator: ["separator"],
  campaignBenefits: ["campaignBenefits", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  campaignSelector: "div";
  campaignCta: "div";
  campaignLogo: typeof CampaignLogo;
  button: typeof Button;
  separator: typeof Separator;
  campaignBenefits: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCampaignSelector__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCampaignSelector__VariantsArgs;
    args?: PlasmicCampaignSelector__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCampaignSelector__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCampaignSelector__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCampaignSelector__ArgProps,
      internalVariantPropNames: PlasmicCampaignSelector__VariantProps
    });

    return PlasmicCampaignSelector__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "campaignSelector") {
    func.displayName = "PlasmicCampaignSelector";
  } else {
    func.displayName = `PlasmicCampaignSelector.${nodeName}`;
  }
  return func;
}

export const PlasmicCampaignSelector = Object.assign(
  // Top-level PlasmicCampaignSelector renders the root element
  makeNodeComponent("campaignSelector"),
  {
    // Helper components rendering sub-elements
    campaignCta: makeNodeComponent("campaignCta"),
    campaignLogo: makeNodeComponent("campaignLogo"),
    button: makeNodeComponent("button"),
    separator: makeNodeComponent("separator"),
    campaignBenefits: makeNodeComponent("campaignBenefits"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicCampaignSelector
    internalVariantProps: PlasmicCampaignSelector__VariantProps,
    internalArgProps: PlasmicCampaignSelector__ArgProps
  }
);

export default PlasmicCampaignSelector;
/* prettier-ignore-end */
