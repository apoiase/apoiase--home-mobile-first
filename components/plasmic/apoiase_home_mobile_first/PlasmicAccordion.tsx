// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uHRmC1SQrkfdMqVjfGKf9u
// Component: Ld_cnPnN7W2o6G
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import AccordionItem from "../../AccordionItem"; // plasmic-import: H9tt-N11VYbEpv/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_blank_project_mobile_first_css from "../apoiase_website_mobile_first/plasmic_apoiase_website_mobile_first.module.css"; // plasmic-import: bFry1ML5XR1ujHJJdSKVcs/projectcss
import projectcss from "./plasmic_apoiase_home_mobile_first.module.css"; // plasmic-import: uHRmC1SQrkfdMqVjfGKf9u/projectcss
import sty from "./PlasmicAccordion.module.css"; // plasmic-import: Ld_cnPnN7W2o6G/css

export type PlasmicAccordion__VariantMembers = {};

export type PlasmicAccordion__VariantsArgs = {};
type VariantPropType = keyof PlasmicAccordion__VariantsArgs;
export const PlasmicAccordion__VariantProps = new Array<VariantPropType>();

export type PlasmicAccordion__ArgsType = {};
type ArgPropType = keyof PlasmicAccordion__ArgsType;
export const PlasmicAccordion__ArgProps = new Array<ArgPropType>();

export type PlasmicAccordion__OverridesType = {
  root?: p.Flex<"div">;
  accordionItem1?: p.Flex<typeof AccordionItem>;
  accordionItem2?: p.Flex<typeof AccordionItem>;
  text?: p.Flex<"div">;
  accordionItem3?: p.Flex<typeof AccordionItem>;
  accordionItem4?: p.Flex<typeof AccordionItem>;
};

export interface DefaultAccordionProps {
  className?: string;
}

export const defaultAccordion__Args: Partial<PlasmicAccordion__ArgsType> = {};

function PlasmicAccordion__RenderFunc(props: {
  variants: PlasmicAccordion__VariantsArgs;
  args: PlasmicAccordion__ArgsType;
  overrides: PlasmicAccordion__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultAccordion__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_blank_project_mobile_first_css.plasmic_tokens,
        sty.root
      )}
    >
      <AccordionItem
        data-plasmic-name={"accordionItem1"}
        data-plasmic-override={overrides.accordionItem1}
        className={classNames("__wab_instance", sty.accordionItem1)}
        description={
          "Uma Campanha Pontual pode durar quanto tempo o fazedor/criador achar necessário para arrecadar o valor necessário para seu projeto, o fazedor pode adicionar na criação de campanha uma data para que a campanha saia do ar, e essa data não é mutável após a publicação da campanha. Leia mais sobre em nosso Blog clicando aqui."
        }
        openned={true}
        title={"Quanto tempo dura uma Campanha Pontual?"}
      />

      <AccordionItem
        data-plasmic-name={"accordionItem2"}
        data-plasmic-override={overrides.accordionItem2}
        className={classNames("__wab_instance", sty.accordionItem2)}
        description={"Hola que tal"}
        title={
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"Como criar uma Campanha na APOIA.se?"}
          </div>
        }
      />

      <AccordionItem
        data-plasmic-name={"accordionItem3"}
        data-plasmic-override={overrides.accordionItem3}
        className={classNames("__wab_instance", sty.accordionItem3)}
        description={"Hola que tal"}
        title={"Quais tipos de Campanhas existem na APOIA.se?"}
      />

      <AccordionItem
        data-plasmic-name={"accordionItem4"}
        data-plasmic-override={overrides.accordionItem4}
        className={classNames("__wab_instance", sty.accordionItem4)}
        description={"Hola que tal"}
        title={"Quanto tempo dura uma Campanha Contínua?"}
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "accordionItem1",
    "accordionItem2",
    "text",
    "accordionItem3",
    "accordionItem4"
  ],
  accordionItem1: ["accordionItem1"],
  accordionItem2: ["accordionItem2", "text"],
  text: ["text"],
  accordionItem3: ["accordionItem3"],
  accordionItem4: ["accordionItem4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  accordionItem1: typeof AccordionItem;
  accordionItem2: typeof AccordionItem;
  text: "div";
  accordionItem3: typeof AccordionItem;
  accordionItem4: typeof AccordionItem;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAccordion__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAccordion__VariantsArgs;
    args?: PlasmicAccordion__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAccordion__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAccordion__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAccordion__ArgProps,
      internalVariantPropNames: PlasmicAccordion__VariantProps
    });

    return PlasmicAccordion__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAccordion";
  } else {
    func.displayName = `PlasmicAccordion.${nodeName}`;
  }
  return func;
}

export const PlasmicAccordion = Object.assign(
  // Top-level PlasmicAccordion renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    accordionItem1: makeNodeComponent("accordionItem1"),
    accordionItem2: makeNodeComponent("accordionItem2"),
    text: makeNodeComponent("text"),
    accordionItem3: makeNodeComponent("accordionItem3"),
    accordionItem4: makeNodeComponent("accordionItem4"),

    // Metadata about props expected for PlasmicAccordion
    internalVariantProps: PlasmicAccordion__VariantProps,
    internalArgProps: PlasmicAccordion__ArgProps
  }
);

export default PlasmicAccordion;
/* prettier-ignore-end */
