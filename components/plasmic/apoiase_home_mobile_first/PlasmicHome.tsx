// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uHRmC1SQrkfdMqVjfGKf9u
// Component: dIjUc9Ag_ZBaG
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent
import BrandLogo from "../../BrandLogo"; // plasmic-import: vv-FUmdWgjNGov/component
import NavButton from "../../NavButton"; // plasmic-import: OefAL3Aw-COiWL/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import Header from "../../Header"; // plasmic-import: B9FLT8oPZ9C43X/component
import HeroCta from "../../HeroCta"; // plasmic-import: ozAM-MtCORwPgF/component
import Search from "../../Search"; // plasmic-import: QRAoC0EgvJgG6/component
import SectionTitle from "../../SectionTitle"; // plasmic-import: HsPvkGMx3yKpeK/component
import CampaignSelector from "../../CampaignSelector"; // plasmic-import: 5hHmsy_Q3GRqGM/component
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms"; // plasmic-import: 8N9-WfZSaq/codeComponent
import BenefitsItem from "../../BenefitsItem"; // plasmic-import: D76PYThZLkOlj5/component
import { CmsRowField } from "@plasmicpkgs/plasmic-cms"; // plasmic-import: w6HdOz-Pcn/codeComponent
import AccordionSlider from "../../AccordionSlider"; // plasmic-import: nyb4DURAJwn3NM/component
import BenefitsCard from "../../BenefitsCard"; // plasmic-import: AcQyntlRHBwn79/component
import { ParallaxWrapper } from "@plasmicpkgs/react-scroll-parallax"; // plasmic-import: bozP4lLlAZ/codeComponent
import TestemonialSlider from "../../TestemonialSlider"; // plasmic-import: o6A8HVpdskn2kO/component
import Accordion from "../../Accordion"; // plasmic-import: Ld_cnPnN7W2o6G/component
import Footer from "../../Footer"; // plasmic-import: B_NoenvngFrRGS/component

import { useScreenVariants as useScreenVariantsdtAhV3Us7QyP7 } from "../apoiase_website_mobile_first/PlasmicGlobalVariant__Screen"; // plasmic-import: dtAhV3Us7qyP7/globalVariant
import { useScreenVariants as useScreenVariantsxe6Z4OYQgGkbgB } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: xe6z4oYQgGkbgB/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_blank_project_mobile_first_css from "../apoiase_website_mobile_first/plasmic_apoiase_website_mobile_first.module.css"; // plasmic-import: bFry1ML5XR1ujHJJdSKVcs/projectcss
import projectcss from "./plasmic_apoiase_home_mobile_first.module.css"; // plasmic-import: uHRmC1SQrkfdMqVjfGKf9u/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: dIjUc9Ag_ZBaG/css

import ApoiaseIconArrowDownIcon from "./icons/PlasmicIcon__ApoiaseIconArrowDown"; // plasmic-import: E5-wYW7gHkgxiY/icon
import ApoiaseIconMessagesIcon from "./icons/PlasmicIcon__ApoiaseIconMessages"; // plasmic-import: Y8u2bYxodiYauD/icon
import ApoiaseIconMuralIcon from "./icons/PlasmicIcon__ApoiaseIconMural"; // plasmic-import: XNMF3iiSRAxQxk/icon
import ApoiaseIconSupportIcon from "./icons/PlasmicIcon__ApoiaseIconSupport"; // plasmic-import: WSts9xq5xVQ-wG/icon
import ApoiaseIconCoinIcon from "./icons/PlasmicIcon__ApoiaseIconCoin"; // plasmic-import: B1-JtpJsEMQooM/icon
import ApoiaseIconManagerIcon from "./icons/PlasmicIcon__ApoiaseIconManager"; // plasmic-import: oTsPHHge7fDrR6/icon
import ApoiaseIconBookIcon from "./icons/PlasmicIcon__ApoiaseIconBook"; // plasmic-import: T_ibgnDsHlgCLF/icon
import ApoiaseIllustrationPlantIcon from "./icons/PlasmicIcon__ApoiaseIllustrationPlant"; // plasmic-import: upVgWCWQP-wGwy/icon
import ApoiaseIllustrationLineIcon from "./icons/PlasmicIcon__ApoiaseIllustrationLine"; // plasmic-import: KG08fx6g3XzC-R/icon

export type PlasmicHome__VariantMembers = {};

export type PlasmicHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>();

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  apoiaseHome?: p.Flex<"div">;
  container3?: p.Flex<"div">;
  navigationBar?: p.Flex<typeof NavigationBar>;
  brandLogo?: p.Flex<typeof BrandLogo>;
  shadow?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  headerHome?: p.Flex<typeof Header>;
  mainContent?: p.Flex<"main">;
  sectionHero?: p.Flex<"section">;
  heroCta?: p.Flex<typeof HeroCta>;
  sectionCampaignSearch?: p.Flex<"section">;
  container?: p.Flex<"div">;
  search?: p.Flex<typeof Search>;
  sectionCampaignSelector?: p.Flex<"section">;
  container2?: p.Flex<"div">;
  h4?: p.Flex<"h4">;
  sectionHowTo?: p.Flex<"section">;
  accordionSlider?: p.Flex<typeof AccordionSlider>;
  sectionBenefits?: p.Flex<"section">;
  icon?: p.Flex<"svg">;
  icon2?: p.Flex<"svg">;
  icon3?: p.Flex<"svg">;
  icon4?: p.Flex<"svg">;
  icon5?: p.Flex<"svg">;
  icon6?: p.Flex<"svg">;
  sectionWhy?: p.Flex<"section">;
  apoiaseIconPlant?: p.Flex<"svg">;
  svg?: p.Flex<"svg">;
  sectionTestemonials?: p.Flex<"section">;
  testemonialSlider?: p.Flex<typeof TestemonialSlider>;
  sectionFaq?: p.Flex<"section">;
  accordionWrapper?: p.Flex<typeof Accordion>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultHomeProps {}

export const defaultHome__Args: Partial<PlasmicHome__ArgsType> = {};

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultHome__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdtAhV3Us7QyP7(),
    screen: useScreenVariantsxe6Z4OYQgGkbgB()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">
          {
            "Financiamento Coletivo na APOIA.se | Crowdfunding Pontual e Contínuo"
          }
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={
            "Financiamento Coletivo na APOIA.se | Crowdfunding Pontual e Contínuo"
          }
        />
        <meta
          key="description"
          property="og:description"
          name="description"
          content={
            "Financiamento Coletivo na APOIA.se | Crowdfunding Pontual e Contínuo"
          }
        />
        <meta
          key="og:image"
          property="og:image"
          content={
            "https://site-assets.plasmic.app/06e5aa9f3ed7f92d147fd17db6242d29.svg"
          }
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"apoiaseHome"}
          data-plasmic-override={overrides.apoiaseHome}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_blank_project_mobile_first_css.plasmic_tokens,
            sty.apoiaseHome
          )}
        >
          {(hasVariant(globalVariants, "screen", "tablet") ? true : true) ? (
            <div
              data-plasmic-name={"container3"}
              data-plasmic-override={overrides.container3}
              className={classNames(projectcss.all, sty.container3)}
            >
              <NavigationBar
                data-plasmic-name={"navigationBar"}
                data-plasmic-override={overrides.navigationBar}
                brand={
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__l4GuP
                    )}
                    component={Link}
                    href={"#" as const}
                    platform={"nextjs"}
                  >
                    <BrandLogo
                      data-plasmic-name={"brandLogo"}
                      data-plasmic-override={overrides.brandLogo}
                      className={classNames("__wab_instance", sty.brandLogo)}
                    />
                  </p.PlasmicLink>
                }
                className={classNames("__wab_instance", sty.navigationBar)}
                closeButton={
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__vTi9P)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    src={"https://static1.plasmic.app/close.svg" as const}
                  />
                }
                forceOpenMenu={false}
                itemsGap={0 as const}
                menuItems={
                  true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__decQi)}
                    >
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__pAdgs
                          )}
                        >
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__sle1J
                            )}
                            component={Link}
                            href={"/continua-por-mes" as const}
                            platform={"nextjs"}
                          >
                            <NavButton
                              className={classNames(
                                "__wab_instance",
                                sty.navButton__yoDfs
                              )}
                              withEndIcon={true}
                            />
                          </p.PlasmicLink>

                          <NavButton
                            className={classNames(
                              "__wab_instance",
                              sty.navButton__u4RqY
                            )}
                            withEndIcon={true}
                          >
                            {"Aprenda"}
                          </NavButton>
                        </p.Stack>
                      ) : null}
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__dc6Oz
                          )}
                        >
                          <NavButton
                            className={classNames(
                              "__wab_instance",
                              sty.navButton__xcSpc
                            )}
                          >
                            {"Acessar Conta"}
                          </NavButton>
                        </p.Stack>
                      ) : null}
                    </div>
                  ) : null
                }
                openButton={
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__y6Wkv)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    src={"https://static1.plasmic.app/menu.svg" as const}
                  />
                }
                responsiveBreakpoint={768 as const}
              />
            </div>
          ) : null}
          {true ? (
            <Reveal
              className={classNames("__wab_instance", sty.reveal__yxBts)}
              duration={2500 as const}
              triggerOnce={true}
            >
              {true ? (
                <div
                  data-plasmic-name={"shadow"}
                  data-plasmic-override={overrides.shadow}
                  className={classNames(projectcss.all, sty.shadow)}
                >
                  <Header
                    data-plasmic-name={"header"}
                    data-plasmic-override={overrides.header}
                    className={classNames("__wab_instance", sty.header)}
                    size={"small" as const}
                    withCta={true}
                  />
                </div>
              ) : null}
            </Reveal>
          ) : null}
          {true ? (
            <Header
              data-plasmic-name={"headerHome"}
              data-plasmic-override={overrides.headerHome}
              className={classNames("__wab_instance", sty.headerHome)}
            />
          ) : null}
          {true ? (
            <main
              data-plasmic-name={"mainContent"}
              data-plasmic-override={overrides.mainContent}
              className={classNames(projectcss.all, sty.mainContent)}
            >
              <section
                data-plasmic-name={"sectionHero"}
                data-plasmic-override={overrides.sectionHero}
                className={classNames(projectcss.all, sty.sectionHero)}
              >
                {true ? (
                  <HeroCta
                    data-plasmic-name={"heroCta"}
                    data-plasmic-override={overrides.heroCta}
                    className={classNames("__wab_instance", sty.heroCta)}
                    headline={"Financiamento \nColetivo que te acompanha"}
                    subtitle={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__drg7U
                        )}
                      >
                        {
                          "Inicie, desenvolva e fortaleça aquilo que você ama fazer com o crowdfunding da APOIA.se"
                        }
                      </div>
                    }
                  />
                ) : null}
              </section>

              <p.Stack
                as={"section"}
                data-plasmic-name={"sectionCampaignSearch"}
                data-plasmic-override={overrides.sectionCampaignSearch}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.sectionCampaignSearch
                )}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"container"}
                  data-plasmic-override={overrides.container}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.container)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__l1A4N)}
                  >
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3___4Sd61
                      )}
                    >
                      {"Busque entre os nossos mais de "}
                    </h3>

                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__imo
                      )}
                    >
                      {"5.000 Fazedores(as)"}
                    </h1>
                  </p.Stack>

                  <Search
                    data-plasmic-name={"search"}
                    data-plasmic-override={overrides.search}
                    className={classNames("__wab_instance", sty.search)}
                  />
                </p.Stack>
              </p.Stack>

              {true ? (
                <p.Stack
                  as={"section"}
                  data-plasmic-name={"sectionCampaignSelector"}
                  data-plasmic-override={overrides.sectionCampaignSelector}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.sectionCampaignSelector
                  )}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"container2"}
                    data-plasmic-override={overrides.container2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.container2)}
                  >
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__deHh2
                        )}
                      >
                        {true ? (
                          <SectionTitle
                            className={classNames(
                              "__wab_instance",
                              sty.sectionTitle__nt8Nc
                            )}
                            subtitle={
                              <h4
                                data-plasmic-name={"h4"}
                                data-plasmic-override={overrides.h4}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h4,
                                  projectcss.__wab_text,
                                  sty.h4
                                )}
                              >
                                {
                                  "Escolha a modalidade que melhor se adapta ao que você busca no momento:"
                                }
                              </h4>
                            }
                            title={
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.h2__goQBx
                                )}
                              >
                                {
                                  "Acompanhamos você em todos os momentos do seu trabalho ou projeto"
                                }
                              </h2>
                            }
                          />
                        ) : null}
                      </div>
                    ) : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__i4NNq)}
                    >
                      <CampaignSelector
                        className={classNames(
                          "__wab_instance",
                          sty.campaignSelector__jFyX8
                        )}
                      >
                        <CmsQueryRepeater
                          className={classNames(
                            "__wab_instance",
                            sty.cmsDataLoader__tDiQw
                          )}
                          desc={false}
                          emptyMessage={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___28R0N
                              )}
                            >
                              {"No matching published entries found."}
                            </div>
                          }
                          forceEmptyState={false}
                          forceLoadingState={false}
                          limit={0 as const}
                          loadingMessage={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__oqf1
                              )}
                            >
                              {"Loading..."}
                            </div>
                          }
                          noLayout={true}
                          orderBy={"numero" as const}
                          table={"beneficios" as const}
                          useDraft={false}
                        >
                          <BenefitsItem
                            className={classNames(
                              "__wab_instance",
                              sty.benefitsItem__gskjc
                            )}
                            description={
                              <CmsRowField
                                className={classNames(
                                  "__wab_instance",
                                  sty.cmsEntryField__aanJi
                                )}
                              />
                            }
                          />
                        </CmsQueryRepeater>
                      </CampaignSelector>

                      <CampaignSelector
                        className={classNames(
                          "__wab_instance",
                          sty.campaignSelector__xPu92
                        )}
                        pontual={true}
                      >
                        <CmsQueryRepeater
                          className={classNames(
                            "__wab_instance",
                            sty.cmsDataLoader__yIwlv
                          )}
                          desc={false}
                          emptyMessage={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ymmCf
                              )}
                            >
                              {"No matching published entries found."}
                            </div>
                          }
                          forceEmptyState={false}
                          forceLoadingState={false}
                          limit={0 as const}
                          loadingMessage={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xbVa
                              )}
                            >
                              {"Loading..."}
                            </div>
                          }
                          noLayout={true}
                          table={"beneficiosPontual" as const}
                          useDraft={false}
                        >
                          <BenefitsItem
                            className={classNames(
                              "__wab_instance",
                              sty.benefitsItem___4T6D
                            )}
                            description={
                              <CmsRowField
                                className={classNames(
                                  "__wab_instance",
                                  sty.cmsEntryField__rk6Fw
                                )}
                              />
                            }
                          />
                        </CmsQueryRepeater>
                      </CampaignSelector>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              ) : null}
              {true ? (
                <p.Stack
                  as={"section"}
                  data-plasmic-name={"sectionHowTo"}
                  data-plasmic-override={overrides.sectionHowTo}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.sectionHowTo)}
                >
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__vbk68)}
                    >
                      {true ? (
                        <SectionTitle
                          className={classNames(
                            "__wab_instance",
                            sty.sectionTitle__fZeop
                          )}
                          subtitle={
                            true ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___7J09J
                                )}
                              >
                                {
                                  "Não perca tempo e comece sua campanha agora mesmo"
                                }
                              </div>
                            ) : null
                          }
                          title={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__oLAbF
                              )}
                            >
                              {"É Fácil"}
                            </div>
                          }
                        />
                      ) : null}
                      {false ? (
                        <h3
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.h3__n90L0
                          )}
                        >
                          {"Não perca tempo e comece sua campanha agora mesmo"}
                        </h3>
                      ) : null}
                    </p.Stack>
                  ) : null}

                  <AccordionSlider
                    data-plasmic-name={"accordionSlider"}
                    data-plasmic-override={overrides.accordionSlider}
                    className={classNames(
                      "__wab_instance",
                      sty.accordionSlider
                    )}
                  />
                </p.Stack>
              ) : null}
              {true ? (
                <p.Stack
                  as={"section"}
                  data-plasmic-name={"sectionBenefits"}
                  data-plasmic-override={overrides.sectionBenefits}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.sectionBenefits)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__j8VZk)}
                  >
                    {true ? (
                      <SectionTitle
                        className={classNames(
                          "__wab_instance",
                          sty.sectionTitle__diSh5
                        )}
                        subtitle={
                          true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__cYRcC
                              )}
                            >
                              {
                                "Escolha a modalidade que melhor se adapta ao que você está fazendo"
                              }
                            </div>
                          ) : null
                        }
                        title={
                          <h2
                            className={classNames(
                              projectcss.all,
                              projectcss.h2,
                              projectcss.__wab_text,
                              sty.h2__ubLpR
                            )}
                          >
                            {"Por que a APOIA.se?"}
                          </h2>
                        }
                        withoutSubtitle={true}
                      />
                    ) : null}
                  </p.Stack>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__cufnP)}
                  >
                    <BenefitsCard
                      className={classNames(
                        "__wab_instance",
                        sty.benefitsCard__uvoFx
                      )}
                      description={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mwHm
                          )}
                        >
                          {
                            "Temos uma equipe especializada (e muito querida) que orienta direta e coletivamente às campanhas da plataforma rumo ao sucesso!"
                          }
                        </div>
                      }
                      icon={
                        <ApoiaseIconMessagesIcon
                          data-plasmic-name={"icon"}
                          data-plasmic-override={overrides.icon}
                          className={classNames(projectcss.all, sty.icon)}
                          role={"img"}
                        />
                      }
                      title={"O atendimento que você precisa"}
                      vertical={true}
                    />

                    <BenefitsCard
                      className={classNames(
                        "__wab_instance",
                        sty.benefitsCard__qRaYb
                      )}
                      description={
                        "Oferecemos diferentes ecursos para que você tenha através crowdfunding, respaldo financeiro para realizar o que quiser, na hora que quiser."
                      }
                      icon={
                        <ApoiaseIconMuralIcon
                          data-plasmic-name={"icon2"}
                          data-plasmic-override={overrides.icon2}
                          className={classNames(projectcss.all, sty.icon2)}
                          role={"img"}
                        />
                      }
                      title={
                        "Ideal para todas as fases e necessidades do seu Fazer"
                      }
                      vertical={true}
                    />

                    <BenefitsCard
                      className={classNames(
                        "__wab_instance",
                        sty.benefitsCard__doENv
                      )}
                      description={
                        "Ebooks, vídeos, newsletter e artigos de blog. Temos um acervo completo de conteúdos para te ajudar a construir o sucesso do seu crowdfunding."
                      }
                      icon={
                        <ApoiaseIconSupportIcon
                          data-plasmic-name={"icon3"}
                          data-plasmic-override={overrides.icon3}
                          className={classNames(projectcss.all, sty.icon3)}
                          role={"img"}
                        />
                      }
                      title={"Biblioteca de conteúdos"}
                      vertical={true}
                    />

                    <BenefitsCard
                      className={classNames(
                        "__wab_instance",
                        sty.benefitsCard__hjqKu
                      )}
                      description={
                        "Desenvolvemos recursos para que você possa se comunicar internamente com a sua base apoiadora como forma de garantir vida longa a relação de apoio que se inicia. "
                      }
                      icon={
                        <ApoiaseIconCoinIcon
                          data-plasmic-name={"icon4"}
                          data-plasmic-override={overrides.icon4}
                          className={classNames(projectcss.all, sty.icon4)}
                          role={"img"}
                        />
                      }
                      title={"Maior engajamento com a sua rede"}
                      vertical={true}
                    />

                    <BenefitsCard
                      className={classNames(
                        "__wab_instance",
                        sty.benefitsCard__pAlQx
                      )}
                      description={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qUn4I
                          )}
                        >
                          {
                            "Por um longo tempo,operamos só na modalidade mensal - cujas campanhas têm metas para serem batidas t-o-d-o-s os meses. Difícil encontrar uma plataforma com base melhor que essa né?"
                          }
                        </div>
                      }
                      icon={
                        <ApoiaseIconManagerIcon
                          data-plasmic-name={"icon5"}
                          data-plasmic-override={overrides.icon5}
                          className={classNames(projectcss.all, sty.icon5)}
                          role={"img"}
                        />
                      }
                      title={"Especialistas no Financiamento Mensal"}
                      vertical={true}
                    />

                    <BenefitsCard
                      className={classNames(
                        "__wab_instance",
                        sty.benefitsCard__oEx8Y
                      )}
                      description={
                        "Aqui você tem a liberdade de escolher qualquer valor de apoio. Do mais simbólico ao seu valor máximo."
                      }
                      icon={
                        <ApoiaseIconBookIcon
                          data-plasmic-name={"icon6"}
                          data-plasmic-override={overrides.icon6}
                          className={classNames(projectcss.all, sty.icon6)}
                          role={"img"}
                        />
                      }
                      title={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__eh6Ln
                          )}
                        >
                          {"A única plataforma com apoios a partir de R$ 1"}
                        </div>
                      }
                      vertical={true}
                    />
                  </div>
                </p.Stack>
              ) : null}

              <p.Stack
                as={"section"}
                data-plasmic-name={"sectionWhy"}
                data-plasmic-override={overrides.sectionWhy}
                hasGap={true}
                className={classNames(projectcss.all, sty.sectionWhy)}
              >
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___0He6X)}
                  >
                    <ParallaxWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.scrollParallax__jhKdH
                      )}
                      speed={20 as const}
                    >
                      <ApoiaseIllustrationPlantIcon
                        data-plasmic-name={"apoiaseIconPlant"}
                        data-plasmic-override={overrides.apoiaseIconPlant}
                        className={classNames(
                          projectcss.all,
                          sty.apoiaseIconPlant
                        )}
                        role={"img"}
                      />
                    </ParallaxWrapper>

                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___4Jqqx
                        )}
                      >
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___7Tzze
                            )}
                          >
                            <Reveal
                              className={classNames(
                                "__wab_instance",
                                sty.reveal__n53Oy
                              )}
                              direction={"up" as const}
                              duration={1000 as const}
                              effect={"slide" as const}
                              triggerOnce={true}
                            >
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.h2__ewVi5
                                )}
                              >
                                {"Mais de"}
                              </h2>
                            </Reveal>

                            <Reveal
                              className={classNames(
                                "__wab_instance",
                                sty.reveal___6PonZ
                              )}
                              direction={"up" as const}
                              duration={1500 as const}
                              effect={"slide" as const}
                              triggerOnce={true}
                            >
                              <h1
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h1,
                                  projectcss.__wab_text,
                                  sty.h1___9OLxj
                                )}
                              >
                                {"R$ 70 Milhões"}
                              </h1>
                            </Reveal>

                            <Reveal
                              className={classNames(
                                "__wab_instance",
                                sty.reveal__oAj6E
                              )}
                              direction={"up" as const}
                              duration={2000 as const}
                              effect={"slide" as const}
                              triggerOnce={true}
                            >
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.h2__xwoiz
                                )}
                              >
                                {"já transacionados \nentre as campanhas"}
                              </h2>
                            </Reveal>
                          </p.Stack>
                        ) : null}

                        <ParallaxWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.scrollParallax__gfA2I
                          )}
                          speed={20 as const}
                        >
                          <ApoiaseIllustrationLineIcon
                            data-plasmic-name={"svg"}
                            data-plasmic-override={overrides.svg}
                            className={classNames(projectcss.all, sty.svg)}
                            role={"img"}
                          />
                        </ParallaxWrapper>
                      </p.Stack>
                    ) : null}
                  </p.Stack>
                ) : null}
              </p.Stack>

              {true ? (
                <p.Stack
                  as={"section"}
                  data-plasmic-name={"sectionTestemonials"}
                  data-plasmic-override={overrides.sectionTestemonials}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.sectionTestemonials
                  )}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__nLpwN)}
                  >
                    {true ? (
                      <SectionTitle
                        className={classNames(
                          "__wab_instance",
                          sty.sectionTitle___16K3X
                        )}
                        subtitle={
                          true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__tMma
                              )}
                            >
                              {
                                "Escolha a modalidade que melhor se adapta ao que você está fazendo"
                              }
                            </div>
                          ) : null
                        }
                        title={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ddjhN
                            )}
                          >
                            {
                              "Veja o que nossos Fazedores(as) \nestão falando da gente"
                            }
                          </div>
                        }
                        withoutSeparator={true}
                        withoutSubtitle={true}
                      />
                    ) : null}
                    {true ? (
                      <TestemonialSlider
                        data-plasmic-name={"testemonialSlider"}
                        data-plasmic-override={overrides.testemonialSlider}
                        className={classNames(
                          "__wab_instance",
                          sty.testemonialSlider
                        )}
                      />
                    ) : null}
                  </p.Stack>
                </p.Stack>
              ) : null}
              {true ? (
                <p.Stack
                  as={"section"}
                  data-plasmic-name={"sectionFaq"}
                  data-plasmic-override={overrides.sectionFaq}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.sectionFaq)}
                >
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4Sp1H
                      )}
                    >
                      {true ? (
                        <SectionTitle
                          className={classNames(
                            "__wab_instance",
                            sty.sectionTitle___7H0Tn
                          )}
                          subtitle={
                            true ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___5KxW
                                )}
                              >
                                {
                                  "Escolha a modalidade que melhor se adapta ao que você está fazendo"
                                }
                              </div>
                            ) : null
                          }
                          title={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__sRoNl
                              )}
                            >
                              {"Perguntas\nFrequentes"}
                            </div>
                          }
                          withoutSubtitle={true}
                        />
                      ) : null}

                      <Accordion
                        data-plasmic-name={"accordionWrapper"}
                        data-plasmic-override={overrides.accordionWrapper}
                        className={classNames(
                          "__wab_instance",
                          sty.accordionWrapper
                        )}
                      />
                    </p.Stack>
                  ) : null}
                </p.Stack>
              ) : null}
            </main>
          ) : null}

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  apoiaseHome: [
    "apoiaseHome",
    "container3",
    "navigationBar",
    "brandLogo",
    "shadow",
    "header",
    "headerHome",
    "mainContent",
    "sectionHero",
    "heroCta",
    "sectionCampaignSearch",
    "container",
    "search",
    "sectionCampaignSelector",
    "container2",
    "h4",
    "sectionHowTo",
    "accordionSlider",
    "sectionBenefits",
    "icon",
    "icon2",
    "icon3",
    "icon4",
    "icon5",
    "icon6",
    "sectionWhy",
    "apoiaseIconPlant",
    "svg",
    "sectionTestemonials",
    "testemonialSlider",
    "sectionFaq",
    "accordionWrapper",
    "footer"
  ],
  container3: ["container3", "navigationBar", "brandLogo"],
  navigationBar: ["navigationBar", "brandLogo"],
  brandLogo: ["brandLogo"],
  shadow: ["shadow", "header"],
  header: ["header"],
  headerHome: ["headerHome"],
  mainContent: [
    "mainContent",
    "sectionHero",
    "heroCta",
    "sectionCampaignSearch",
    "container",
    "search",
    "sectionCampaignSelector",
    "container2",
    "h4",
    "sectionHowTo",
    "accordionSlider",
    "sectionBenefits",
    "icon",
    "icon2",
    "icon3",
    "icon4",
    "icon5",
    "icon6",
    "sectionWhy",
    "apoiaseIconPlant",
    "svg",
    "sectionTestemonials",
    "testemonialSlider",
    "sectionFaq",
    "accordionWrapper"
  ],
  sectionHero: ["sectionHero", "heroCta"],
  heroCta: ["heroCta"],
  sectionCampaignSearch: ["sectionCampaignSearch", "container", "search"],
  container: ["container", "search"],
  search: ["search"],
  sectionCampaignSelector: ["sectionCampaignSelector", "container2", "h4"],
  container2: ["container2", "h4"],
  h4: ["h4"],
  sectionHowTo: ["sectionHowTo", "accordionSlider"],
  accordionSlider: ["accordionSlider"],
  sectionBenefits: [
    "sectionBenefits",
    "icon",
    "icon2",
    "icon3",
    "icon4",
    "icon5",
    "icon6"
  ],
  icon: ["icon"],
  icon2: ["icon2"],
  icon3: ["icon3"],
  icon4: ["icon4"],
  icon5: ["icon5"],
  icon6: ["icon6"],
  sectionWhy: ["sectionWhy", "apoiaseIconPlant", "svg"],
  apoiaseIconPlant: ["apoiaseIconPlant"],
  svg: ["svg"],
  sectionTestemonials: ["sectionTestemonials", "testemonialSlider"],
  testemonialSlider: ["testemonialSlider"],
  sectionFaq: ["sectionFaq", "accordionWrapper"],
  accordionWrapper: ["accordionWrapper"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  apoiaseHome: "div";
  container3: "div";
  navigationBar: typeof NavigationBar;
  brandLogo: typeof BrandLogo;
  shadow: "div";
  header: typeof Header;
  headerHome: typeof Header;
  mainContent: "main";
  sectionHero: "section";
  heroCta: typeof HeroCta;
  sectionCampaignSearch: "section";
  container: "div";
  search: typeof Search;
  sectionCampaignSelector: "section";
  container2: "div";
  h4: "h4";
  sectionHowTo: "section";
  accordionSlider: typeof AccordionSlider;
  sectionBenefits: "section";
  icon: "svg";
  icon2: "svg";
  icon3: "svg";
  icon4: "svg";
  icon5: "svg";
  icon6: "svg";
  sectionWhy: "section";
  apoiaseIconPlant: "svg";
  svg: "svg";
  sectionTestemonials: "section";
  testemonialSlider: typeof TestemonialSlider;
  sectionFaq: "section";
  accordionWrapper: typeof Accordion;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHome__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHome__ArgProps,
      internalVariantPropNames: PlasmicHome__VariantProps
    });

    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "apoiaseHome") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("apoiaseHome"),
  {
    // Helper components rendering sub-elements
    container3: makeNodeComponent("container3"),
    navigationBar: makeNodeComponent("navigationBar"),
    brandLogo: makeNodeComponent("brandLogo"),
    shadow: makeNodeComponent("shadow"),
    header: makeNodeComponent("header"),
    headerHome: makeNodeComponent("headerHome"),
    mainContent: makeNodeComponent("mainContent"),
    sectionHero: makeNodeComponent("sectionHero"),
    heroCta: makeNodeComponent("heroCta"),
    sectionCampaignSearch: makeNodeComponent("sectionCampaignSearch"),
    container: makeNodeComponent("container"),
    search: makeNodeComponent("search"),
    sectionCampaignSelector: makeNodeComponent("sectionCampaignSelector"),
    container2: makeNodeComponent("container2"),
    h4: makeNodeComponent("h4"),
    sectionHowTo: makeNodeComponent("sectionHowTo"),
    accordionSlider: makeNodeComponent("accordionSlider"),
    sectionBenefits: makeNodeComponent("sectionBenefits"),
    icon: makeNodeComponent("icon"),
    icon2: makeNodeComponent("icon2"),
    icon3: makeNodeComponent("icon3"),
    icon4: makeNodeComponent("icon4"),
    icon5: makeNodeComponent("icon5"),
    icon6: makeNodeComponent("icon6"),
    sectionWhy: makeNodeComponent("sectionWhy"),
    apoiaseIconPlant: makeNodeComponent("apoiaseIconPlant"),
    svg: makeNodeComponent("svg"),
    sectionTestemonials: makeNodeComponent("sectionTestemonials"),
    testemonialSlider: makeNodeComponent("testemonialSlider"),
    sectionFaq: makeNodeComponent("sectionFaq"),
    accordionWrapper: makeNodeComponent("accordionWrapper"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
