// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uHRmC1SQrkfdMqVjfGKf9u
// Component: bFxeWa77MgyS1h
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavButton from "../../NavButton"; // plasmic-import: OefAL3Aw-COiWL/component
import Button from "../../Button"; // plasmic-import: 9qvF8EbiZQKemF/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_blank_project_mobile_first_css from "../apoiase_website_mobile_first/plasmic_apoiase_website_mobile_first.module.css"; // plasmic-import: bFry1ML5XR1ujHJJdSKVcs/projectcss
import projectcss from "./plasmic_apoiase_home_mobile_first.module.css"; // plasmic-import: uHRmC1SQrkfdMqVjfGKf9u/projectcss
import sty from "./PlasmicNavDropdown.module.css"; // plasmic-import: bFxeWa77MgyS1h/css

import ApoiaseIconArrowDownIcon from "./icons/PlasmicIcon__ApoiaseIconArrowDown"; // plasmic-import: E5-wYW7gHkgxiY/icon
import ApoiaseIconProfileIcon from "./icons/PlasmicIcon__ApoiaseIconProfile"; // plasmic-import: 6iUr9qBAfHHPwr/icon
import ApoiaseIconHeartUnselectedIcon from "./icons/PlasmicIcon__ApoiaseIconHeartUnselected"; // plasmic-import: 03oXJi_lLp1Cty/icon
import ApoiaseIconMyPledgeIcon from "./icons/PlasmicIcon__ApoiaseIconMyPledge"; // plasmic-import: X5y2-rNKG2oaty/icon
import ApoiaseIconCardIcon from "./icons/PlasmicIcon__ApoiaseIconCard"; // plasmic-import: QcTjdv0xnNHr9R/icon
import ApoiaseIconCheckIcon from "./icons/PlasmicIcon__ApoiaseIconCheck"; // plasmic-import: Mr5axEh571LUti/icon
import ApoiaseIconArrowRightIcon from "./icons/PlasmicIcon__ApoiaseIconArrowRight"; // plasmic-import: V9-fXVC3GD8ubn/icon

export type PlasmicNavDropdown__VariantMembers = {
  withIcon: "withIcon";
  withButton: "withButton";
  closed: "closed";
};

export type PlasmicNavDropdown__VariantsArgs = {
  withIcon?: SingleBooleanChoiceArg<"withIcon">;
  withButton?: SingleBooleanChoiceArg<"withButton">;
  closed?: SingleBooleanChoiceArg<"closed">;
};

type VariantPropType = keyof PlasmicNavDropdown__VariantsArgs;
export const PlasmicNavDropdown__VariantProps = new Array<VariantPropType>(
  "withIcon",
  "withButton",
  "closed"
);

export type PlasmicNavDropdown__ArgsType = {};
type ArgPropType = keyof PlasmicNavDropdown__ArgsType;
export const PlasmicNavDropdown__ArgProps = new Array<ArgPropType>();

export type PlasmicNavDropdown__OverridesType = {
  navDropdown?: p.Flex<"div">;
  withLinks?: p.Flex<"div">;
  endIcon?: p.Flex<"svg">;
  startIcon2?: p.Flex<"svg">;
  endIcon2?: p.Flex<"svg">;
  separator?: p.Flex<"div">;
  withButton?: p.Flex<"div">;
  button?: p.Flex<typeof Button>;
};

export interface DefaultNavDropdownProps {
  withIcon?: SingleBooleanChoiceArg<"withIcon">;
  withButton?: SingleBooleanChoiceArg<"withButton">;
  closed?: SingleBooleanChoiceArg<"closed">;
  className?: string;
}

export const defaultNavDropdown__Args: Partial<PlasmicNavDropdown__ArgsType> =
  {};

function PlasmicNavDropdown__RenderFunc(props: {
  variants: PlasmicNavDropdown__VariantsArgs;
  args: PlasmicNavDropdown__ArgsType;
  overrides: PlasmicNavDropdown__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultNavDropdown__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    (hasVariant(variants, "closed", "closed") ? true : true) ? (
      <p.Stack
        as={"div"}
        data-plasmic-name={"navDropdown"}
        data-plasmic-override={overrides.navDropdown}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_blank_project_mobile_first_css.plasmic_tokens,
          sty.navDropdown,
          {
            [sty.navDropdownclosed]: hasVariant(variants, "closed", "closed"),
            [sty.navDropdownwithButton]: hasVariant(
              variants,
              "withButton",
              "withButton"
            ),
            [sty.navDropdownwithIcon]: hasVariant(
              variants,
              "withIcon",
              "withIcon"
            )
          }
        )}
      >
        {(hasVariant(variants, "closed", "closed") ? true : true) ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"withLinks"}
            data-plasmic-override={overrides.withLinks}
            hasGap={true}
            className={classNames(projectcss.all, sty.withLinks, {
              [sty.withLinksclosed]: hasVariant(variants, "closed", "closed"),
              [sty.withLinkswithIcon]: hasVariant(
                variants,
                "withIcon",
                "withIcon"
              )
            })}
          >
            {(hasVariant(variants, "closed", "closed") ? true : true) ? (
              <NavButton
                className={classNames("__wab_instance", sty.navButton___9Bvh, {
                  [sty.navButtonclosed___9Bvh34X07]: hasVariant(
                    variants,
                    "closed",
                    "closed"
                  ),
                  [sty.navButtonwithButton___9BvhIikar]: hasVariant(
                    variants,
                    "withButton",
                    "withButton"
                  ),
                  [sty.navButtonwithIcon___9BvhW4Y0C]: hasVariant(
                    variants,
                    "withIcon",
                    "withIcon"
                  )
                })}
                endIcon={
                  (hasVariant(variants, "closed", "closed") ? true : true) ? (
                    <ApoiaseIconArrowDownIcon
                      data-plasmic-name={"endIcon"}
                      data-plasmic-override={overrides.endIcon}
                      className={classNames(projectcss.all, sty.endIcon, {
                        [sty.endIconclosed]: hasVariant(
                          variants,
                          "closed",
                          "closed"
                        )
                      })}
                      role={"img"}
                    />
                  ) : null
                }
                startIcon={
                  <p.PlasmicIcon
                    PlasmicIconType={
                      hasVariant(variants, "withButton", "withButton")
                        ? ApoiaseIconProfileIcon
                        : ApoiaseIconArrowDownIcon
                    }
                    className={classNames(projectcss.all, sty.svg__zSiEc, {
                      [sty.svgwithButton__zSiEcIikar]: hasVariant(
                        variants,
                        "withButton",
                        "withButton"
                      )
                    })}
                    role={"img"}
                  />
                }
                withEndIcon={
                  hasVariant(variants, "withIcon", "withIcon")
                    ? true
                    : undefined
                }
                withSecondLevel={true}
                withStartIcon={
                  hasVariant(variants, "withButton", "withButton")
                    ? true
                    : undefined
                }
              >
                {(hasVariant(variants, "closed", "closed") ? true : true) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wvWkc,
                      {
                        [sty.textclosed__wvWkc34X07]: hasVariant(
                          variants,
                          "closed",
                          "closed"
                        )
                      }
                    )}
                  >
                    {"Modalidades"}
                  </div>
                ) : null}
              </NavButton>
            ) : null}
            {(hasVariant(variants, "closed", "closed") ? true : true) ? (
              <NavButton
                className={classNames("__wab_instance", sty.navButton__qRo, {
                  [sty.navButtonclosed__qRo34X07]: hasVariant(
                    variants,
                    "closed",
                    "closed"
                  ),
                  [sty.navButtonwithButton__qRoIikar]: hasVariant(
                    variants,
                    "withButton",
                    "withButton"
                  ),
                  [sty.navButtonwithIcon__qRoW4Y0C]: hasVariant(
                    variants,
                    "withIcon",
                    "withIcon"
                  )
                })}
                startIcon={
                  <p.PlasmicIcon
                    PlasmicIconType={
                      hasVariant(variants, "withButton", "withButton")
                        ? ApoiaseIconHeartUnselectedIcon
                        : hasVariant(variants, "withIcon", "withIcon")
                        ? ApoiaseIconArrowDownIcon
                        : "div"
                    }
                    className={classNames(projectcss.all, sty.svg__csh9, {
                      [sty.svgwithButton__csh9Iikar]: hasVariant(
                        variants,
                        "withButton",
                        "withButton"
                      ),
                      [sty.svgwithIcon__csh9W4Y0C]: hasVariant(
                        variants,
                        "withIcon",
                        "withIcon"
                      )
                    })}
                    role={"img"}
                  />
                }
                withEndIcon={
                  hasVariant(variants, "withIcon", "withIcon")
                    ? true
                    : undefined
                }
                withSecondLevel={true}
                withStartIcon={
                  hasVariant(variants, "withButton", "withButton")
                    ? true
                    : undefined
                }
              >
                {(hasVariant(variants, "closed", "closed") ? true : true) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uSl7X,
                      {
                        [sty.textclosed__uSl7X34X07]: hasVariant(
                          variants,
                          "closed",
                          "closed"
                        )
                      }
                    )}
                  >
                    {"Modalidades"}
                  </div>
                ) : null}
              </NavButton>
            ) : null}
            {(hasVariant(variants, "closed", "closed") ? true : true) ? (
              <NavButton
                className={classNames("__wab_instance", sty.navButton__sfXA, {
                  [sty.navButtonclosed__sfXA34X07]: hasVariant(
                    variants,
                    "closed",
                    "closed"
                  ),
                  [sty.navButtonwithButton__sfXAIikar]: hasVariant(
                    variants,
                    "withButton",
                    "withButton"
                  ),
                  [sty.navButtonwithIcon__sfXAW4Y0C]: hasVariant(
                    variants,
                    "withIcon",
                    "withIcon"
                  )
                })}
                startIcon={
                  <p.PlasmicIcon
                    PlasmicIconType={
                      hasVariant(variants, "withButton", "withButton")
                        ? ApoiaseIconMyPledgeIcon
                        : ApoiaseIconArrowDownIcon
                    }
                    className={classNames(projectcss.all, sty.svg___4P5MH, {
                      [sty.svgwithButton___4P5MHIikar]: hasVariant(
                        variants,
                        "withButton",
                        "withButton"
                      ),
                      [sty.svgwithIcon___4P5MHw4Y0C]: hasVariant(
                        variants,
                        "withIcon",
                        "withIcon"
                      )
                    })}
                    role={"img"}
                  />
                }
                withEndIcon={
                  hasVariant(variants, "withIcon", "withIcon")
                    ? true
                    : undefined
                }
                withSecondLevel={true}
                withStartIcon={
                  hasVariant(variants, "withButton", "withButton")
                    ? true
                    : undefined
                }
              />
            ) : null}
            {(
              hasVariant(variants, "closed", "closed")
                ? true
                : hasVariant(variants, "withButton", "withButton")
                ? true
                : false
            ) ? (
              <NavButton
                className={classNames("__wab_instance", sty.navButton__fKqV, {
                  [sty.navButtonclosed__fKqV34X07]: hasVariant(
                    variants,
                    "closed",
                    "closed"
                  ),
                  [sty.navButtonwithButton__fKqVIikar]: hasVariant(
                    variants,
                    "withButton",
                    "withButton"
                  ),
                  [sty.navButtonwithIcon__fKqVw4Y0C]: hasVariant(
                    variants,
                    "withIcon",
                    "withIcon"
                  )
                })}
                endIcon={
                  <ApoiaseIconArrowDownIcon
                    data-plasmic-name={"endIcon2"}
                    data-plasmic-override={overrides.endIcon2}
                    className={classNames(projectcss.all, sty.endIcon2)}
                    role={"img"}
                  />
                }
                startIcon={
                  <p.PlasmicIcon
                    data-plasmic-name={"startIcon2"}
                    data-plasmic-override={overrides.startIcon2}
                    PlasmicIconType={
                      hasVariant(variants, "withButton", "withButton")
                        ? ApoiaseIconCardIcon
                        : ApoiaseIconArrowDownIcon
                    }
                    className={classNames(projectcss.all, sty.startIcon2, {
                      [sty.startIcon2withButton]: hasVariant(
                        variants,
                        "withButton",
                        "withButton"
                      ),
                      [sty.startIcon2withIcon]: hasVariant(
                        variants,
                        "withIcon",
                        "withIcon"
                      )
                    })}
                    role={"img"}
                  />
                }
                withEndIcon={
                  hasVariant(variants, "withIcon", "withIcon")
                    ? true
                    : undefined
                }
                withSecondLevel={true}
                withStartIcon={
                  hasVariant(variants, "withButton", "withButton")
                    ? true
                    : undefined
                }
              />
            ) : null}
          </p.Stack>
        ) : null}
        {(
          hasVariant(variants, "closed", "closed")
            ? true
            : hasVariant(variants, "withButton", "withButton")
            ? true
            : hasVariant(variants, "withIcon", "withIcon")
            ? true
            : true
        ) ? (
          <div
            data-plasmic-name={"separator"}
            data-plasmic-override={overrides.separator}
            className={classNames(projectcss.all, sty.separator, {
              [sty.separatorclosed]: hasVariant(variants, "closed", "closed"),
              [sty.separatorwithButton]: hasVariant(
                variants,
                "withButton",
                "withButton"
              ),
              [sty.separatorwithIcon]: hasVariant(
                variants,
                "withIcon",
                "withIcon"
              )
            })}
          />
        ) : null}
        {(
          hasVariant(variants, "closed", "closed")
            ? true
            : hasVariant(variants, "withButton", "withButton")
            ? true
            : hasVariant(variants, "withIcon", "withIcon")
            ? true
            : true
        ) ? (
          <div
            data-plasmic-name={"withButton"}
            data-plasmic-override={overrides.withButton}
            className={classNames(projectcss.all, sty.withButton, {
              [sty.withButtonclosed]: hasVariant(variants, "closed", "closed"),
              [sty.withButtonwithButton]: hasVariant(
                variants,
                "withButton",
                "withButton"
              ),
              [sty.withButtonwithIcon]: hasVariant(
                variants,
                "withIcon",
                "withIcon"
              )
            })}
          >
            {(hasVariant(variants, "closed", "closed") ? true : true) ? (
              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button, {
                  [sty.buttonclosed]: hasVariant(variants, "closed", "closed")
                })}
                color={"white" as const}
                size={"minimal" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___81Rj7
                  )}
                >
                  {"Sair"}
                </div>
              </Button>
            ) : null}
          </div>
        ) : null}
      </p.Stack>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  navDropdown: [
    "navDropdown",
    "withLinks",
    "endIcon",
    "startIcon2",
    "endIcon2",
    "separator",
    "withButton",
    "button"
  ],
  withLinks: ["withLinks", "endIcon", "startIcon2", "endIcon2"],
  endIcon: ["endIcon"],
  startIcon2: ["startIcon2"],
  endIcon2: ["endIcon2"],
  separator: ["separator"],
  withButton: ["withButton", "button"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  navDropdown: "div";
  withLinks: "div";
  endIcon: "svg";
  startIcon2: "svg";
  endIcon2: "svg";
  separator: "div";
  withButton: "div";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavDropdown__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavDropdown__VariantsArgs;
    args?: PlasmicNavDropdown__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavDropdown__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavDropdown__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavDropdown__ArgProps,
      internalVariantPropNames: PlasmicNavDropdown__VariantProps
    });

    return PlasmicNavDropdown__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "navDropdown") {
    func.displayName = "PlasmicNavDropdown";
  } else {
    func.displayName = `PlasmicNavDropdown.${nodeName}`;
  }
  return func;
}

export const PlasmicNavDropdown = Object.assign(
  // Top-level PlasmicNavDropdown renders the root element
  makeNodeComponent("navDropdown"),
  {
    // Helper components rendering sub-elements
    withLinks: makeNodeComponent("withLinks"),
    endIcon: makeNodeComponent("endIcon"),
    startIcon2: makeNodeComponent("startIcon2"),
    endIcon2: makeNodeComponent("endIcon2"),
    separator: makeNodeComponent("separator"),
    withButton: makeNodeComponent("withButton"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicNavDropdown
    internalVariantProps: PlasmicNavDropdown__VariantProps,
    internalArgProps: PlasmicNavDropdown__ArgProps
  }
);

export default PlasmicNavDropdown;
/* prettier-ignore-end */
