// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uHRmC1SQrkfdMqVjfGKf9u
// Component: H9tt-N11VYbEpv
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_blank_project_mobile_first_css from "../apoiase_website_mobile_first/plasmic_apoiase_website_mobile_first.module.css"; // plasmic-import: bFry1ML5XR1ujHJJdSKVcs/projectcss
import projectcss from "./plasmic_apoiase_home_mobile_first.module.css"; // plasmic-import: uHRmC1SQrkfdMqVjfGKf9u/projectcss
import sty from "./PlasmicAccordionItem.module.css"; // plasmic-import: H9tt-N11VYbEpv/css

import ApoiaseIconPlusIcon from "./icons/PlasmicIcon__ApoiaseIconPlus"; // plasmic-import: r_Yl3giNSmk9sG/icon
import ApoiaseIconEqualIcon from "./icons/PlasmicIcon__ApoiaseIconEqual"; // plasmic-import: vC6l12JhjER9x9/icon

export type PlasmicAccordionItem__VariantMembers = {
  openned: "openned";
};

export type PlasmicAccordionItem__VariantsArgs = {
  openned?: SingleBooleanChoiceArg<"openned">;
};

type VariantPropType = keyof PlasmicAccordionItem__VariantsArgs;
export const PlasmicAccordionItem__VariantProps = new Array<VariantPropType>(
  "openned"
);

export type PlasmicAccordionItem__ArgsType = {
  title?: React.ReactNode;
  description?: React.ReactNode;
};

type ArgPropType = keyof PlasmicAccordionItem__ArgsType;
export const PlasmicAccordionItem__ArgProps = new Array<ArgPropType>(
  "title",
  "description"
);

export type PlasmicAccordionItem__OverridesType = {
  accordionItem?: p.Flex<"div">;
  accordionTitle?: p.Flex<"div">;
  apoiaseIconPlus?: p.Flex<"svg">;
  h5?: p.Flex<"h5">;
  accordionDescription?: p.Flex<"div">;
  p?: p.Flex<"p">;
};

export interface DefaultAccordionItemProps {
  title?: React.ReactNode;
  description?: React.ReactNode;
  openned?: SingleBooleanChoiceArg<"openned">;
  className?: string;
}

export const defaultAccordionItem__Args: Partial<PlasmicAccordionItem__ArgsType> =
  {};

function PlasmicAccordionItem__RenderFunc(props: {
  variants: PlasmicAccordionItem__VariantsArgs;
  args: PlasmicAccordionItem__ArgsType;
  overrides: PlasmicAccordionItem__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultAccordionItem__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"accordionItem"}
      data-plasmic-override={overrides.accordionItem}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_blank_project_mobile_first_css.plasmic_tokens,
        sty.accordionItem,
        {
          [sty.accordionItemopenned]: hasVariant(variants, "openned", "openned")
        }
      )}
    >
      {true ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"accordionTitle"}
          data-plasmic-override={overrides.accordionTitle}
          hasGap={true}
          className={classNames(projectcss.all, sty.accordionTitle, {
            [sty.accordionTitleopenned]: hasVariant(
              variants,
              "openned",
              "openned"
            )
          })}
        >
          <p.PlasmicIcon
            data-plasmic-name={"apoiaseIconPlus"}
            data-plasmic-override={overrides.apoiaseIconPlus}
            PlasmicIconType={
              hasVariant(variants, "openned", "openned")
                ? ApoiaseIconEqualIcon
                : ApoiaseIconPlusIcon
            }
            className={classNames(projectcss.all, sty.apoiaseIconPlus, {
              [sty.apoiaseIconPlusopenned]: hasVariant(
                variants,
                "openned",
                "openned"
              )
            })}
            role={"img"}
          />

          <h5
            data-plasmic-name={"h5"}
            data-plasmic-override={overrides.h5}
            className={classNames(projectcss.all, projectcss.h5, sty.h5, {
              [sty.h5openned]: hasVariant(variants, "openned", "openned")
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Como criar uma Campanha na APOIA.se?",
              value: args.title,
              className: classNames(sty.slotTargetTitle, {
                [sty.slotTargetTitleopenned]: hasVariant(
                  variants,
                  "openned",
                  "openned"
                )
              })
            })}
          </h5>
        </p.Stack>
      ) : null}
      {(hasVariant(variants, "openned", "openned") ? true : true) ? (
        <div
          data-plasmic-name={"accordionDescription"}
          data-plasmic-override={overrides.accordionDescription}
          className={classNames(projectcss.all, sty.accordionDescription, {
            [sty.accordionDescriptionopenned]: hasVariant(
              variants,
              "openned",
              "openned"
            )
          })}
        >
          {(hasVariant(variants, "openned", "openned") ? true : false) ? (
            <p
              data-plasmic-name={"p"}
              data-plasmic-override={overrides.p}
              className={classNames(projectcss.all, projectcss.p, sty.p, {
                [sty.popenned]: hasVariant(variants, "openned", "openned")
              })}
            >
              {true
                ? p.renderPlasmicSlot({
                    defaultContents: (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kg6C
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#000000" }}
                          >
                            {
                              "Uma Campanha Pontual pode durar quanto tempo o fazedor/criador achar necessário para arrecadar o valor necessário para seu projeto, o fazedor pode adicionar na criação de campanha uma data para que a campanha saia do ar, e essa data não é mutável após a publicação da campanha. Leia mais sobre em nosso Blog clicando aqui."
                            }
                          </span>
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </div>
                    ),

                    value: args.description,
                    className: classNames(sty.slotTargetDescription, {
                      [sty.slotTargetDescriptionopenned]: hasVariant(
                        variants,
                        "openned",
                        "openned"
                      )
                    })
                  })
                : null}
            </p>
          ) : null}
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  accordionItem: [
    "accordionItem",
    "accordionTitle",
    "apoiaseIconPlus",
    "h5",
    "accordionDescription",
    "p"
  ],
  accordionTitle: ["accordionTitle", "apoiaseIconPlus", "h5"],
  apoiaseIconPlus: ["apoiaseIconPlus"],
  h5: ["h5"],
  accordionDescription: ["accordionDescription", "p"],
  p: ["p"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  accordionItem: "div";
  accordionTitle: "div";
  apoiaseIconPlus: "svg";
  h5: "h5";
  accordionDescription: "div";
  p: "p";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAccordionItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAccordionItem__VariantsArgs;
    args?: PlasmicAccordionItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAccordionItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAccordionItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAccordionItem__ArgProps,
      internalVariantPropNames: PlasmicAccordionItem__VariantProps
    });

    return PlasmicAccordionItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "accordionItem") {
    func.displayName = "PlasmicAccordionItem";
  } else {
    func.displayName = `PlasmicAccordionItem.${nodeName}`;
  }
  return func;
}

export const PlasmicAccordionItem = Object.assign(
  // Top-level PlasmicAccordionItem renders the root element
  makeNodeComponent("accordionItem"),
  {
    // Helper components rendering sub-elements
    accordionTitle: makeNodeComponent("accordionTitle"),
    apoiaseIconPlus: makeNodeComponent("apoiaseIconPlus"),
    h5: makeNodeComponent("h5"),
    accordionDescription: makeNodeComponent("accordionDescription"),
    p: makeNodeComponent("p"),

    // Metadata about props expected for PlasmicAccordionItem
    internalVariantProps: PlasmicAccordionItem__VariantProps,
    internalArgProps: PlasmicAccordionItem__ArgProps
  }
);

export default PlasmicAccordionItem;
/* prettier-ignore-end */
