// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uHRmC1SQrkfdMqVjfGKf9u
// Component: nyb4DURAJwn3NM
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import AccordionSliderItem from "../../AccordionSliderItem"; // plasmic-import: gN7pnF8TwNmzHv/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_blank_project_mobile_first_css from "../apoiase_website_mobile_first/plasmic_apoiase_website_mobile_first.module.css"; // plasmic-import: bFry1ML5XR1ujHJJdSKVcs/projectcss
import projectcss from "./plasmic_apoiase_home_mobile_first.module.css"; // plasmic-import: uHRmC1SQrkfdMqVjfGKf9u/projectcss
import sty from "./PlasmicAccordionSlider.module.css"; // plasmic-import: nyb4DURAJwn3NM/css

export type PlasmicAccordionSlider__VariantMembers = {};

export type PlasmicAccordionSlider__VariantsArgs = {};
type VariantPropType = keyof PlasmicAccordionSlider__VariantsArgs;
export const PlasmicAccordionSlider__VariantProps =
  new Array<VariantPropType>();

export type PlasmicAccordionSlider__ArgsType = {};
type ArgPropType = keyof PlasmicAccordionSlider__ArgsType;
export const PlasmicAccordionSlider__ArgProps = new Array<ArgPropType>();

export type PlasmicAccordionSlider__OverridesType = {
  root?: p.Flex<"div">;
  accordionSliderItem1?: p.Flex<typeof AccordionSliderItem>;
  accordionSliderItem2?: p.Flex<typeof AccordionSliderItem>;
  accordionSliderItem3?: p.Flex<typeof AccordionSliderItem>;
  accordionSliderItem4?: p.Flex<typeof AccordionSliderItem>;
};

export interface DefaultAccordionSliderProps {
  className?: string;
}

export const defaultAccordionSlider__Args: Partial<PlasmicAccordionSlider__ArgsType> =
  {};

function PlasmicAccordionSlider__RenderFunc(props: {
  variants: PlasmicAccordionSlider__VariantsArgs;
  args: PlasmicAccordionSlider__ArgsType;
  overrides: PlasmicAccordionSlider__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultAccordionSlider__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_blank_project_mobile_first_css.plasmic_tokens,
        sty.root
      )}
    >
      <AccordionSliderItem
        data-plasmic-name={"accordionSliderItem1"}
        data-plasmic-override={overrides.accordionSliderItem1}
        className={classNames("__wab_instance", sty.accordionSliderItem1)}
        description={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qIpn6
            )}
          >
            {
              "A criação da sua página na APOIA.se é gratuita, viu? Crie uma página contando o que faz, quais são suas metas financeiras e, se quiser, defina as recompensas para o público que te apoia."
            }
          </div>
        }
        openned={true}
        title={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__yNxDn
            )}
          >
            {"Crie sua campanha"}
          </div>
        }
      />

      {true ? (
        <AccordionSliderItem
          data-plasmic-name={"accordionSliderItem2"}
          data-plasmic-override={overrides.accordionSliderItem2}
          className={classNames("__wab_instance", sty.accordionSliderItem2)}
          description={
            true ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iqQgX
                )}
              >
                {
                  "Divulgue a sua campanha de crowdfunding para o seu público! Enquanto isso, a gente cuida dos pagamentos e atendimento dos seus apoiadores(as)."
                }
              </div>
            ) : null
          }
          number={"02."}
          openned={true}
          title={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__axa15
              )}
            >
              {"Ative sua rede para receber apoios"}
            </div>
          }
        />
      ) : null}

      <AccordionSliderItem
        data-plasmic-name={"accordionSliderItem3"}
        data-plasmic-override={overrides.accordionSliderItem3}
        className={classNames("__wab_instance", sty.accordionSliderItem3)}
        description={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___2EW5
            )}
          >
            {
              "Aqui você encontra alguns recursos para ficar em contato com quem apoia o seu fazer. Use o Mural de Campanha para postar conteúdos exclusivos para sua comunidade e mande mensagens diretas ou em massa pelo Chat da APOIA.se!"
            }
          </div>
        }
        number={"03."}
        openned={true}
        title={"Engaje sua comunidade apoiadora"}
      />

      <AccordionSliderItem
        data-plasmic-name={"accordionSliderItem4"}
        data-plasmic-override={overrides.accordionSliderItem4}
        className={classNames("__wab_instance", sty.accordionSliderItem4)}
        description={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__hueOw
            )}
          >
            {
              "Você já sabe que a criação de campanha é gratuita, né?\nMas para que a APOIA.se continue operando, uma taxa é aplicada só depois que a campanha recebeu apoios. O valor da taxa varia conforme a modalidade escolhida, confira aqui."
            }
          </div>
        }
        number={"04."}
        openned={true}
        title={"Receba $"}
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "accordionSliderItem1",
    "accordionSliderItem2",
    "accordionSliderItem3",
    "accordionSliderItem4"
  ],
  accordionSliderItem1: ["accordionSliderItem1"],
  accordionSliderItem2: ["accordionSliderItem2"],
  accordionSliderItem3: ["accordionSliderItem3"],
  accordionSliderItem4: ["accordionSliderItem4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  accordionSliderItem1: typeof AccordionSliderItem;
  accordionSliderItem2: typeof AccordionSliderItem;
  accordionSliderItem3: typeof AccordionSliderItem;
  accordionSliderItem4: typeof AccordionSliderItem;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAccordionSlider__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAccordionSlider__VariantsArgs;
    args?: PlasmicAccordionSlider__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAccordionSlider__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAccordionSlider__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAccordionSlider__ArgProps,
      internalVariantPropNames: PlasmicAccordionSlider__VariantProps
    });

    return PlasmicAccordionSlider__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAccordionSlider";
  } else {
    func.displayName = `PlasmicAccordionSlider.${nodeName}`;
  }
  return func;
}

export const PlasmicAccordionSlider = Object.assign(
  // Top-level PlasmicAccordionSlider renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    accordionSliderItem1: makeNodeComponent("accordionSliderItem1"),
    accordionSliderItem2: makeNodeComponent("accordionSliderItem2"),
    accordionSliderItem3: makeNodeComponent("accordionSliderItem3"),
    accordionSliderItem4: makeNodeComponent("accordionSliderItem4"),

    // Metadata about props expected for PlasmicAccordionSlider
    internalVariantProps: PlasmicAccordionSlider__VariantProps,
    internalArgProps: PlasmicAccordionSlider__ArgProps
  }
);

export default PlasmicAccordionSlider;
/* prettier-ignore-end */
