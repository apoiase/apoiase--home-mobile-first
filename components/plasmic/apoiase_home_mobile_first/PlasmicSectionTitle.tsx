// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uHRmC1SQrkfdMqVjfGKf9u
// Component: HsPvkGMx3yKpeK
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_blank_project_mobile_first_css from "../apoiase_website_mobile_first/plasmic_apoiase_website_mobile_first.module.css"; // plasmic-import: bFry1ML5XR1ujHJJdSKVcs/projectcss
import projectcss from "./plasmic_apoiase_home_mobile_first.module.css"; // plasmic-import: uHRmC1SQrkfdMqVjfGKf9u/projectcss
import sty from "./PlasmicSectionTitle.module.css"; // plasmic-import: HsPvkGMx3yKpeK/css

export type PlasmicSectionTitle__VariantMembers = {
  withoutSubtitle: "withoutSubtitle";
  withoutSeparator: "withoutSeparator";
};

export type PlasmicSectionTitle__VariantsArgs = {
  withoutSubtitle?: SingleBooleanChoiceArg<"withoutSubtitle">;
  withoutSeparator?: SingleBooleanChoiceArg<"withoutSeparator">;
};

type VariantPropType = keyof PlasmicSectionTitle__VariantsArgs;
export const PlasmicSectionTitle__VariantProps = new Array<VariantPropType>(
  "withoutSubtitle",
  "withoutSeparator"
);

export type PlasmicSectionTitle__ArgsType = {
  title?: React.ReactNode;
  subtitle?: React.ReactNode;
};

type ArgPropType = keyof PlasmicSectionTitle__ArgsType;
export const PlasmicSectionTitle__ArgProps = new Array<ArgPropType>(
  "title",
  "subtitle"
);

export type PlasmicSectionTitle__OverridesType = {
  sectionTitle?: p.Flex<"div">;
  h2?: p.Flex<"h2">;
  h4?: p.Flex<"h4">;
  separator?: p.Flex<"div">;
};

export interface DefaultSectionTitleProps {
  title?: React.ReactNode;
  subtitle?: React.ReactNode;
  withoutSubtitle?: SingleBooleanChoiceArg<"withoutSubtitle">;
  withoutSeparator?: SingleBooleanChoiceArg<"withoutSeparator">;
  className?: string;
}

export const defaultSectionTitle__Args: Partial<PlasmicSectionTitle__ArgsType> =
  {};

function PlasmicSectionTitle__RenderFunc(props: {
  variants: PlasmicSectionTitle__VariantsArgs;
  args: PlasmicSectionTitle__ArgsType;
  overrides: PlasmicSectionTitle__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultSectionTitle__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    true ? (
      <p.Stack
        as={"div"}
        data-plasmic-name={"sectionTitle"}
        data-plasmic-override={overrides.sectionTitle}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_blank_project_mobile_first_css.plasmic_tokens,
          sty.sectionTitle,
          {
            [sty.sectionTitlewithoutSeparator]: hasVariant(
              variants,
              "withoutSeparator",
              "withoutSeparator"
            ),
            [sty.sectionTitlewithoutSubtitle]: hasVariant(
              variants,
              "withoutSubtitle",
              "withoutSubtitle"
            )
          }
        )}
      >
        <h2
          data-plasmic-name={"h2"}
          data-plasmic-override={overrides.h2}
          className={classNames(projectcss.all, projectcss.h2, sty.h2, {
            [sty.h2withoutSeparator]: hasVariant(
              variants,
              "withoutSeparator",
              "withoutSeparator"
            ),
            [sty.h2withoutSubtitle]: hasVariant(
              variants,
              "withoutSubtitle",
              "withoutSubtitle"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents:
              "Diferentes formatos para financiar diferentes Fazeres.",
            value: args.title,
            className: classNames(sty.slotTargetTitle, {
              [sty.slotTargetTitlewithoutSeparator]: hasVariant(
                variants,
                "withoutSeparator",
                "withoutSeparator"
              ),
              [sty.slotTargetTitlewithoutSubtitle]: hasVariant(
                variants,
                "withoutSubtitle",
                "withoutSubtitle"
              )
            })
          })}
        </h2>

        {(
          hasVariant(variants, "withoutSeparator", "withoutSeparator")
            ? false
            : hasVariant(variants, "withoutSubtitle", "withoutSubtitle")
            ? false
            : true
        ) ? (
          <h4
            data-plasmic-name={"h4"}
            data-plasmic-override={overrides.h4}
            className={classNames(projectcss.all, projectcss.h4, sty.h4, {
              [sty.h4withoutSeparator]: hasVariant(
                variants,
                "withoutSeparator",
                "withoutSeparator"
              ),
              [sty.h4withoutSubtitle]: hasVariant(
                variants,
                "withoutSubtitle",
                "withoutSubtitle"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents:
                "Escolha a modalidade que melhor se adapta ao que você está fazendo",
              value: args.subtitle,
              className: classNames(sty.slotTargetSubtitle, {
                [sty.slotTargetSubtitlewithoutSeparator]: hasVariant(
                  variants,
                  "withoutSeparator",
                  "withoutSeparator"
                ),
                [sty.slotTargetSubtitlewithoutSubtitle]: hasVariant(
                  variants,
                  "withoutSubtitle",
                  "withoutSubtitle"
                )
              })
            })}
          </h4>
        ) : null}
        {(
          hasVariant(variants, "withoutSeparator", "withoutSeparator")
            ? false
            : true
        ) ? (
          <div
            data-plasmic-name={"separator"}
            data-plasmic-override={overrides.separator}
            className={classNames(projectcss.all, sty.separator, {
              [sty.separatorwithoutSeparator]: hasVariant(
                variants,
                "withoutSeparator",
                "withoutSeparator"
              )
            })}
          />
        ) : null}
      </p.Stack>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  sectionTitle: ["sectionTitle", "h2", "h4", "separator"],
  h2: ["h2"],
  h4: ["h4"],
  separator: ["separator"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  sectionTitle: "div";
  h2: "h2";
  h4: "h4";
  separator: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSectionTitle__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSectionTitle__VariantsArgs;
    args?: PlasmicSectionTitle__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSectionTitle__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSectionTitle__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSectionTitle__ArgProps,
      internalVariantPropNames: PlasmicSectionTitle__VariantProps
    });

    return PlasmicSectionTitle__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "sectionTitle") {
    func.displayName = "PlasmicSectionTitle";
  } else {
    func.displayName = `PlasmicSectionTitle.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionTitle = Object.assign(
  // Top-level PlasmicSectionTitle renders the root element
  makeNodeComponent("sectionTitle"),
  {
    // Helper components rendering sub-elements
    h2: makeNodeComponent("h2"),
    h4: makeNodeComponent("h4"),
    separator: makeNodeComponent("separator"),

    // Metadata about props expected for PlasmicSectionTitle
    internalVariantProps: PlasmicSectionTitle__VariantProps,
    internalArgProps: PlasmicSectionTitle__ArgProps
  }
);

export default PlasmicSectionTitle;
/* prettier-ignore-end */
