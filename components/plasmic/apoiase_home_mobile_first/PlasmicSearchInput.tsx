// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uHRmC1SQrkfdMqVjfGKf9u
// Component: tLoc9U0EyoHtZB
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_blank_project_mobile_first_css from "../apoiase_website_mobile_first/plasmic_apoiase_website_mobile_first.module.css"; // plasmic-import: bFry1ML5XR1ujHJJdSKVcs/projectcss
import projectcss from "./plasmic_apoiase_home_mobile_first.module.css"; // plasmic-import: uHRmC1SQrkfdMqVjfGKf9u/projectcss
import sty from "./PlasmicSearchInput.module.css"; // plasmic-import: tLoc9U0EyoHtZB/css

import ApoiaseIconSearchIcon from "./icons/PlasmicIcon__ApoiaseIconSearch"; // plasmic-import: Bao1BqHe97l2Sg/icon

export type PlasmicSearchInput__VariantMembers = {};

export type PlasmicSearchInput__VariantsArgs = {};
type VariantPropType = keyof PlasmicSearchInput__VariantsArgs;
export const PlasmicSearchInput__VariantProps = new Array<VariantPropType>();

export type PlasmicSearchInput__ArgsType = {
  inputText?: React.ReactNode;
};

type ArgPropType = keyof PlasmicSearchInput__ArgsType;
export const PlasmicSearchInput__ArgProps = new Array<ArgPropType>("inputText");

export type PlasmicSearchInput__OverridesType = {
  searchInput?: p.Flex<"div">;
  inputIcon?: p.Flex<"svg">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultSearchInputProps {
  inputText?: React.ReactNode;
  className?: string;
}

export const defaultSearchInput__Args: Partial<PlasmicSearchInput__ArgsType> =
  {};

function PlasmicSearchInput__RenderFunc(props: {
  variants: PlasmicSearchInput__VariantsArgs;
  args: PlasmicSearchInput__ArgsType;
  overrides: PlasmicSearchInput__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultSearchInput__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"searchInput"}
      data-plasmic-override={overrides.searchInput}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_blank_project_mobile_first_css.plasmic_tokens,
        sty.searchInput
      )}
    >
      <ApoiaseIconSearchIcon
        data-plasmic-name={"inputIcon"}
        data-plasmic-override={overrides.inputIcon}
        className={classNames(projectcss.all, sty.inputIcon)}
        role={"img"}
      />

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <input
              className={classNames(
                projectcss.all,
                projectcss.input,
                sty.textInput__rGbLh
              )}
              placeholder={"Digite o que deseja procurar..." as const}
              size={1 as const}
              type={"text" as const}
              value={"" as const}
            />
          ),

          value: args.inputText
        })}
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  searchInput: ["searchInput", "inputIcon", "freeBox"],
  inputIcon: ["inputIcon"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  searchInput: "div";
  inputIcon: "svg";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSearchInput__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSearchInput__VariantsArgs;
    args?: PlasmicSearchInput__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSearchInput__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSearchInput__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSearchInput__ArgProps,
      internalVariantPropNames: PlasmicSearchInput__VariantProps
    });

    return PlasmicSearchInput__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "searchInput") {
    func.displayName = "PlasmicSearchInput";
  } else {
    func.displayName = `PlasmicSearchInput.${nodeName}`;
  }
  return func;
}

export const PlasmicSearchInput = Object.assign(
  // Top-level PlasmicSearchInput renders the root element
  makeNodeComponent("searchInput"),
  {
    // Helper components rendering sub-elements
    inputIcon: makeNodeComponent("inputIcon"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicSearchInput
    internalVariantProps: PlasmicSearchInput__VariantProps,
    internalArgProps: PlasmicSearchInput__ArgProps
  }
);

export default PlasmicSearchInput;
/* prettier-ignore-end */
