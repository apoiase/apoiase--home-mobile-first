// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uHRmC1SQrkfdMqVjfGKf9u
// Component: B9FLT8oPZ9C43X
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavDropdown from "../../NavDropdown"; // plasmic-import: bFxeWa77MgyS1h/component
import BrandLogo from "../../BrandLogo"; // plasmic-import: vv-FUmdWgjNGov/component
import NavButton from "../../NavButton"; // plasmic-import: OefAL3Aw-COiWL/component
import Button from "../../Button"; // plasmic-import: 9qvF8EbiZQKemF/component

import { useScreenVariants as useScreenVariantsxe6Z4OYQgGkbgB } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: xe6z4oYQgGkbgB/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_blank_project_mobile_first_css from "../apoiase_website_mobile_first/plasmic_apoiase_website_mobile_first.module.css"; // plasmic-import: bFry1ML5XR1ujHJJdSKVcs/projectcss
import projectcss from "./plasmic_apoiase_home_mobile_first.module.css"; // plasmic-import: uHRmC1SQrkfdMqVjfGKf9u/projectcss
import sty from "./PlasmicHeader.module.css"; // plasmic-import: B9FLT8oPZ9C43X/css

import ApoiaseIconArrowDownIcon from "./icons/PlasmicIcon__ApoiaseIconArrowDown"; // plasmic-import: E5-wYW7gHkgxiY/icon
import ApoiaseIconCheckIcon from "./icons/PlasmicIcon__ApoiaseIconCheck"; // plasmic-import: Mr5axEh571LUti/icon
import ApoiaseIconArrowRightIcon from "./icons/PlasmicIcon__ApoiaseIconArrowRight"; // plasmic-import: V9-fXVC3GD8ubn/icon
import ApoiaseIconBurguerIcon from "./icons/PlasmicIcon__ApoiaseIconBurguer"; // plasmic-import: zoSbtFnvJ5sji4/icon

export type PlasmicHeader__VariantMembers = {
  size: "medium" | "small";
  withCta: "withCta";
};

export type PlasmicHeader__VariantsArgs = {
  size?: SingleChoiceArg<"medium" | "small">;
  withCta?: SingleBooleanChoiceArg<"withCta">;
};

type VariantPropType = keyof PlasmicHeader__VariantsArgs;
export const PlasmicHeader__VariantProps = new Array<VariantPropType>(
  "size",
  "withCta"
);

export type PlasmicHeader__ArgsType = {};
type ArgPropType = keyof PlasmicHeader__ArgsType;
export const PlasmicHeader__ArgProps = new Array<ArgPropType>();

export type PlasmicHeader__OverridesType = {
  header?: p.Flex<"header">;
  navContainer?: p.Flex<"div">;
  modalitiesMenu?: p.Flex<typeof NavDropdown>;
  learnMenu?: p.Flex<typeof NavDropdown>;
  brandLogo?: p.Flex<typeof BrandLogo>;
  modalitiesButton?: p.Flex<typeof NavButton>;
  startIcon2?: p.Flex<"svg">;
  endIcon2?: p.Flex<"svg">;
  learnButton?: p.Flex<typeof NavButton>;
  startIcon3?: p.Flex<"svg">;
  endIcon3?: p.Flex<"svg">;
  navDropdown?: p.Flex<typeof NavDropdown>;
  navButton?: p.Flex<typeof NavButton>;
  button?: p.Flex<typeof Button>;
  apoiaseIconBurguer?: p.Flex<"svg">;
};

export interface DefaultHeaderProps {
  size?: SingleChoiceArg<"medium" | "small">;
  withCta?: SingleBooleanChoiceArg<"withCta">;
  className?: string;
}

export const defaultHeader__Args: Partial<PlasmicHeader__ArgsType> = {};

function PlasmicHeader__RenderFunc(props: {
  variants: PlasmicHeader__VariantsArgs;
  args: PlasmicHeader__ArgsType;
  overrides: PlasmicHeader__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultHeader__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsxe6Z4OYQgGkbgB()
  });

  return (
    true ? (
      <p.Stack
        as={"header"}
        data-plasmic-name={"header"}
        data-plasmic-override={overrides.header}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_blank_project_mobile_first_css.plasmic_tokens,
          sty.header,
          {
            [sty.headersize_medium]: hasVariant(variants, "size", "medium"),
            [sty.headersize_small]: hasVariant(variants, "size", "small")
          }
        )}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"navContainer"}
          data-plasmic-override={overrides.navContainer}
          hasGap={true}
          className={classNames(projectcss.all, sty.navContainer)}
        >
          {true ? (
            <p.Stack
              as={"nav"}
              hasGap={true}
              className={classNames(projectcss.all, sty.nav__dg37P)}
            >
              {true ? (
                <NavDropdown
                  data-plasmic-name={"modalitiesMenu"}
                  data-plasmic-override={overrides.modalitiesMenu}
                  className={classNames("__wab_instance", sty.modalitiesMenu)}
                />
              ) : null}
              {true ? (
                <NavDropdown
                  data-plasmic-name={"learnMenu"}
                  data-plasmic-override={overrides.learnMenu}
                  className={classNames("__wab_instance", sty.learnMenu)}
                />
              ) : null}

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__kOEyA
                )}
                component={Link}
                href={"/" as const}
                platform={"nextjs"}
                target={undefined}
              >
                <BrandLogo
                  data-plasmic-name={"brandLogo"}
                  data-plasmic-override={overrides.brandLogo}
                  className={classNames("__wab_instance", sty.brandLogo)}
                />
              </p.PlasmicLink>

              <NavButton
                data-plasmic-name={"modalitiesButton"}
                data-plasmic-override={overrides.modalitiesButton}
                className={classNames("__wab_instance", sty.modalitiesButton, {
                  [sty.modalitiesButtonwithCta]: hasVariant(
                    variants,
                    "withCta",
                    "withCta"
                  )
                })}
                endIcon={
                  <ApoiaseIconArrowDownIcon
                    data-plasmic-name={"endIcon2"}
                    data-plasmic-override={overrides.endIcon2}
                    className={classNames(projectcss.all, sty.endIcon2, {
                      [sty.endIcon2withCta]: hasVariant(
                        variants,
                        "withCta",
                        "withCta"
                      )
                    })}
                    role={"img"}
                  />
                }
                startIcon={
                  <ApoiaseIconArrowDownIcon
                    data-plasmic-name={"startIcon2"}
                    data-plasmic-override={overrides.startIcon2}
                    className={classNames(projectcss.all, sty.startIcon2)}
                    role={"img"}
                  />
                }
                withEndIcon={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eDpdd,
                    {
                      [sty.textwithCta__eDpddBh7Vw]: hasVariant(
                        variants,
                        "withCta",
                        "withCta"
                      )
                    }
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#000000" }}
                    >
                      {"Modalidades"}
                    </span>
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
              </NavButton>

              <NavButton
                data-plasmic-name={"learnButton"}
                data-plasmic-override={overrides.learnButton}
                className={classNames("__wab_instance", sty.learnButton, {
                  [sty.learnButtonwithCta]: hasVariant(
                    variants,
                    "withCta",
                    "withCta"
                  )
                })}
                endIcon={
                  <ApoiaseIconArrowDownIcon
                    data-plasmic-name={"endIcon3"}
                    data-plasmic-override={overrides.endIcon3}
                    className={classNames(projectcss.all, sty.endIcon3)}
                    role={"img"}
                  />
                }
                startIcon={
                  <ApoiaseIconArrowDownIcon
                    data-plasmic-name={"startIcon3"}
                    data-plasmic-override={overrides.startIcon3}
                    className={classNames(projectcss.all, sty.startIcon3)}
                    role={"img"}
                  />
                }
                withEndIcon={true}
              >
                {true ? (
                  <NavDropdown
                    data-plasmic-name={"navDropdown"}
                    data-plasmic-override={overrides.navDropdown}
                    className={classNames("__wab_instance", sty.navDropdown)}
                  />
                ) : null}

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__e2BqO
                  )}
                >
                  {"Aprenda"}
                </div>
              </NavButton>
            </p.Stack>
          ) : null}
          {true ? (
            <p.Stack
              as={"nav"}
              hasGap={true}
              className={classNames(projectcss.all, sty.nav___66Zl)}
            >
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__oKv9
                )}
                component={Link}
                href={"/continua-por-mes" as const}
                platform={"nextjs"}
              >
                <NavButton
                  data-plasmic-name={"navButton"}
                  data-plasmic-override={overrides.navButton}
                  className={classNames("__wab_instance", sty.navButton)}
                >
                  {"Acessar Conta"}
                </NavButton>
              </p.PlasmicLink>

              {(hasVariant(variants, "withCta", "withCta") ? true : true) ? (
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button, {
                    [sty.buttonwithCta]: hasVariant(
                      variants,
                      "withCta",
                      "withCta"
                    )
                  })}
                  color={"red" as const}
                  size={"minimal" as const}
                >
                  {"Iniciar Campanha"}
                </Button>
              ) : null}
            </p.Stack>
          ) : null}
          {true ? (
            <ApoiaseIconBurguerIcon
              data-plasmic-name={"apoiaseIconBurguer"}
              data-plasmic-override={overrides.apoiaseIconBurguer}
              className={classNames(projectcss.all, sty.apoiaseIconBurguer)}
              role={"img"}
            />
          ) : null}
        </p.Stack>
      </p.Stack>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  header: [
    "header",
    "navContainer",
    "modalitiesMenu",
    "learnMenu",
    "brandLogo",
    "modalitiesButton",
    "startIcon2",
    "endIcon2",
    "learnButton",
    "startIcon3",
    "endIcon3",
    "navDropdown",
    "navButton",
    "button",
    "apoiaseIconBurguer"
  ],
  navContainer: [
    "navContainer",
    "modalitiesMenu",
    "learnMenu",
    "brandLogo",
    "modalitiesButton",
    "startIcon2",
    "endIcon2",
    "learnButton",
    "startIcon3",
    "endIcon3",
    "navDropdown",
    "navButton",
    "button",
    "apoiaseIconBurguer"
  ],
  modalitiesMenu: ["modalitiesMenu"],
  learnMenu: ["learnMenu"],
  brandLogo: ["brandLogo"],
  modalitiesButton: ["modalitiesButton", "startIcon2", "endIcon2"],
  startIcon2: ["startIcon2"],
  endIcon2: ["endIcon2"],
  learnButton: ["learnButton", "startIcon3", "endIcon3", "navDropdown"],
  startIcon3: ["startIcon3"],
  endIcon3: ["endIcon3"],
  navDropdown: ["navDropdown"],
  navButton: ["navButton"],
  button: ["button"],
  apoiaseIconBurguer: ["apoiaseIconBurguer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  header: "header";
  navContainer: "div";
  modalitiesMenu: typeof NavDropdown;
  learnMenu: typeof NavDropdown;
  brandLogo: typeof BrandLogo;
  modalitiesButton: typeof NavButton;
  startIcon2: "svg";
  endIcon2: "svg";
  learnButton: typeof NavButton;
  startIcon3: "svg";
  endIcon3: "svg";
  navDropdown: typeof NavDropdown;
  navButton: typeof NavButton;
  button: typeof Button;
  apoiaseIconBurguer: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeader__VariantsArgs;
    args?: PlasmicHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeader__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeader__ArgProps,
      internalVariantPropNames: PlasmicHeader__VariantProps
    });

    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "header") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("header"),
  {
    // Helper components rendering sub-elements
    navContainer: makeNodeComponent("navContainer"),
    modalitiesMenu: makeNodeComponent("modalitiesMenu"),
    learnMenu: makeNodeComponent("learnMenu"),
    brandLogo: makeNodeComponent("brandLogo"),
    modalitiesButton: makeNodeComponent("modalitiesButton"),
    startIcon2: makeNodeComponent("startIcon2"),
    endIcon2: makeNodeComponent("endIcon2"),
    learnButton: makeNodeComponent("learnButton"),
    startIcon3: makeNodeComponent("startIcon3"),
    endIcon3: makeNodeComponent("endIcon3"),
    navDropdown: makeNodeComponent("navDropdown"),
    navButton: makeNodeComponent("navButton"),
    button: makeNodeComponent("button"),
    apoiaseIconBurguer: makeNodeComponent("apoiaseIconBurguer"),

    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
