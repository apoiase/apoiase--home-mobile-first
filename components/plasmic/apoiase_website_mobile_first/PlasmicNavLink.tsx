// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bFry1ML5XR1ujHJJdSKVcs
// Component: 7Z-ceKtKnNu
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_apoiase_website_mobile_first.module.css"; // plasmic-import: bFry1ML5XR1ujHJJdSKVcs/projectcss
import sty from "./PlasmicNavLink.module.css"; // plasmic-import: 7Z-ceKtKnNu/css

import ApoiaseIconArrowDownIcon from "./icons/PlasmicIcon__ApoiaseIconArrowDown"; // plasmic-import: OHY0sRndsmu/icon

export type PlasmicNavLink__VariantMembers = {
  withStartIcon: "withStartIcon";
  withEndIcon: "withEndIcon";
  withSecondLevel: "withSecondLevel";
};

export type PlasmicNavLink__VariantsArgs = {
  withStartIcon?: SingleBooleanChoiceArg<"withStartIcon">;
  withEndIcon?: SingleBooleanChoiceArg<"withEndIcon">;
  withSecondLevel?: SingleBooleanChoiceArg<"withSecondLevel">;
};

type VariantPropType = keyof PlasmicNavLink__VariantsArgs;
export const PlasmicNavLink__VariantProps = new Array<VariantPropType>(
  "withStartIcon",
  "withEndIcon",
  "withSecondLevel"
);

export type PlasmicNavLink__ArgsType = {
  startIcon?: React.ReactNode;
  endIcon?: React.ReactNode;
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicNavLink__ArgsType;
export const PlasmicNavLink__ArgProps = new Array<ArgPropType>(
  "startIcon",
  "endIcon",
  "children"
);

export type PlasmicNavLink__OverridesType = {
  navLink?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultNavLinkProps {
  startIcon?: React.ReactNode;
  endIcon?: React.ReactNode;
  children?: React.ReactNode;
  withStartIcon?: SingleBooleanChoiceArg<"withStartIcon">;
  withEndIcon?: SingleBooleanChoiceArg<"withEndIcon">;
  withSecondLevel?: SingleBooleanChoiceArg<"withSecondLevel">;
  className?: string;
}

export const defaultNavLink__Args: Partial<PlasmicNavLink__ArgsType> = {};

function PlasmicNavLink__RenderFunc(props: {
  variants: PlasmicNavLink__VariantsArgs;
  args: PlasmicNavLink__ArgsType;
  overrides: PlasmicNavLink__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultNavLink__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <p.Stack
      as={p.PlasmicLink}
      data-plasmic-name={"navLink"}
      data-plasmic-override={overrides.navLink}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.navLink,
        {
          [sty.navLinkwithStartIcon]: hasVariant(
            variants,
            "withStartIcon",
            "withStartIcon"
          )
        }
      )}
      component={Link}
      platform={"nextjs"}
    >
      {(hasVariant(variants, "withStartIcon", "withStartIcon") ? true : false)
        ? p.renderPlasmicSlot({
            defaultContents: (
              <ApoiaseIconArrowDownIcon
                className={classNames(projectcss.all, sty.svg__g0GZ5)}
                role={"img"}
              />
            ),

            value: args.startIcon
          })
        : null}
      {p.renderPlasmicSlot({
        defaultContents: "Modalidades",
        value: args.children,
        className: classNames(sty.slotTargetChildren, {
          [sty.slotTargetChildrenwithStartIcon]: hasVariant(
            variants,
            "withStartIcon",
            "withStartIcon"
          )
        })
      })}

      {(
        hasVariant(variants, "withEndIcon", "withEndIcon")
          ? true
          : hasVariant(variants, "withStartIcon", "withStartIcon")
          ? false
          : false
      )
        ? p.renderPlasmicSlot({
            defaultContents: (
              <ApoiaseIconArrowDownIcon
                className={classNames(projectcss.all, sty.svg__yvMka)}
                role={"img"}
              />
            ),

            value: args.endIcon
          })
        : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  navLink: ["navLink"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  navLink: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavLink__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavLink__VariantsArgs;
    args?: PlasmicNavLink__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavLink__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavLink__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavLink__ArgProps,
      internalVariantPropNames: PlasmicNavLink__VariantProps
    });

    return PlasmicNavLink__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "navLink") {
    func.displayName = "PlasmicNavLink";
  } else {
    func.displayName = `PlasmicNavLink.${nodeName}`;
  }
  return func;
}

export const PlasmicNavLink = Object.assign(
  // Top-level PlasmicNavLink renders the root element
  makeNodeComponent("navLink"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicNavLink
    internalVariantProps: PlasmicNavLink__VariantProps,
    internalArgProps: PlasmicNavLink__ArgProps
  }
);

export default PlasmicNavLink;
/* prettier-ignore-end */
