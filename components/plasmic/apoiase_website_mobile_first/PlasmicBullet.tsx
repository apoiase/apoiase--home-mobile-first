// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bFry1ML5XR1ujHJJdSKVcs
// Component: oUXgrQk59ACL
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_apoiase_website_mobile_first.module.css"; // plasmic-import: bFry1ML5XR1ujHJJdSKVcs/projectcss
import sty from "./PlasmicBullet.module.css"; // plasmic-import: oUXgrQk59ACL/css

export type PlasmicBullet__VariantMembers = {
  ativo: "ativo";
};

export type PlasmicBullet__VariantsArgs = {
  ativo?: SingleBooleanChoiceArg<"ativo">;
};

type VariantPropType = keyof PlasmicBullet__VariantsArgs;
export const PlasmicBullet__VariantProps = new Array<VariantPropType>("ativo");

export type PlasmicBullet__ArgsType = {};
type ArgPropType = keyof PlasmicBullet__ArgsType;
export const PlasmicBullet__ArgProps = new Array<ArgPropType>();

export type PlasmicBullet__OverridesType = {
  bullet?: p.Flex<"div">;
};

export interface DefaultBulletProps {
  ativo?: SingleBooleanChoiceArg<"ativo">;
  className?: string;
}

export const defaultBullet__Args: Partial<PlasmicBullet__ArgsType> = {};

function PlasmicBullet__RenderFunc(props: {
  variants: PlasmicBullet__VariantsArgs;
  args: PlasmicBullet__ArgsType;
  overrides: PlasmicBullet__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultBullet__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    true ? (
      <div
        data-plasmic-name={"bullet"}
        data-plasmic-override={overrides.bullet}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.bullet,
          { [sty.bulletativo]: hasVariant(variants, "ativo", "ativo") }
        )}
      />
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  bullet: ["bullet"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  bullet: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBullet__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBullet__VariantsArgs;
    args?: PlasmicBullet__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBullet__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBullet__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBullet__ArgProps,
      internalVariantPropNames: PlasmicBullet__VariantProps
    });

    return PlasmicBullet__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "bullet") {
    func.displayName = "PlasmicBullet";
  } else {
    func.displayName = `PlasmicBullet.${nodeName}`;
  }
  return func;
}

export const PlasmicBullet = Object.assign(
  // Top-level PlasmicBullet renders the root element
  makeNodeComponent("bullet"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicBullet
    internalVariantProps: PlasmicBullet__VariantProps,
    internalArgProps: PlasmicBullet__ArgProps
  }
);

export default PlasmicBullet;
/* prettier-ignore-end */
