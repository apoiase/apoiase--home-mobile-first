// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bFry1ML5XR1ujHJJdSKVcs
// Component: FmoV6OissYUj
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_apoiase_website_mobile_first.module.css"; // plasmic-import: bFry1ML5XR1ujHJJdSKVcs/projectcss
import sty from "./PlasmicTabItem.module.css"; // plasmic-import: FmoV6OissYUj/css

import ApoiaseIconHeartSelectedIcon from "./icons/PlasmicIcon__ApoiaseIconHeartSelected"; // plasmic-import: 6RbjXxtuJL3R/icon

export type PlasmicTabItem__VariantMembers = {
  startIcon: "startIcon";
  endIcon: "endIcon";
  color: "red" | "yellow" | "whiteWYellow";
  sizes: "medium" | "small";
};

export type PlasmicTabItem__VariantsArgs = {
  startIcon?: SingleBooleanChoiceArg<"startIcon">;
  endIcon?: SingleBooleanChoiceArg<"endIcon">;
  color?: SingleChoiceArg<"red" | "yellow" | "whiteWYellow">;
  sizes?: MultiChoiceArg<"medium" | "small">;
};

type VariantPropType = keyof PlasmicTabItem__VariantsArgs;
export const PlasmicTabItem__VariantProps = new Array<VariantPropType>(
  "startIcon",
  "endIcon",
  "color",
  "sizes"
);

export type PlasmicTabItem__ArgsType = {
  title?: React.ReactNode;
  startIconSpace?: React.ReactNode;
  endIconSpace?: React.ReactNode;
};

type ArgPropType = keyof PlasmicTabItem__ArgsType;
export const PlasmicTabItem__ArgProps = new Array<ArgPropType>(
  "title",
  "startIconSpace",
  "endIconSpace"
);

export type PlasmicTabItem__OverridesType = {
  tabItem?: p.Flex<"button">;
  title?: p.Flex<"h5">;
};

export interface DefaultTabItemProps {
  title?: React.ReactNode;
  startIconSpace?: React.ReactNode;
  endIconSpace?: React.ReactNode;
  startIcon?: SingleBooleanChoiceArg<"startIcon">;
  endIcon?: SingleBooleanChoiceArg<"endIcon">;
  color?: SingleChoiceArg<"red" | "yellow" | "whiteWYellow">;
  sizes?: MultiChoiceArg<"medium" | "small">;
  className?: string;
}

export const defaultTabItem__Args: Partial<PlasmicTabItem__ArgsType> = {};

function PlasmicTabItem__RenderFunc(props: {
  variants: PlasmicTabItem__VariantsArgs;
  args: PlasmicTabItem__ArgsType;
  overrides: PlasmicTabItem__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultTabItem__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <p.Stack
      as={"button"}
      data-plasmic-name={"tabItem"}
      data-plasmic-override={overrides.tabItem}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.tabItem,
        {
          [sty.tabItemcolor_red]: hasVariant(variants, "color", "red"),
          [sty.tabItemcolor_whiteWYellow]: hasVariant(
            variants,
            "color",
            "whiteWYellow"
          ),
          [sty.tabItemcolor_yellow]: hasVariant(variants, "color", "yellow"),
          [sty.tabItemendIcon]: hasVariant(variants, "endIcon", "endIcon"),
          [sty.tabItemsizes_medium]: hasVariant(variants, "sizes", "medium"),
          [sty.tabItemsizes_small]: hasVariant(variants, "sizes", "small"),
          [sty.tabItemstartIcon]: hasVariant(variants, "startIcon", "startIcon")
        }
      )}
    >
      {(hasVariant(variants, "startIcon", "startIcon") ? true : false)
        ? p.renderPlasmicSlot({
            defaultContents: (
              <ApoiaseIconHeartSelectedIcon
                className={classNames(projectcss.all, sty.svg__jWKlG)}
                role={"img"}
              />
            ),

            value: args.startIconSpace
          })
        : null}

      <h5
        data-plasmic-name={"title"}
        data-plasmic-override={overrides.title}
        className={classNames(projectcss.all, projectcss.h5, sty.title, {
          [sty.titlecolor_yellow]: hasVariant(variants, "color", "yellow"),
          [sty.titleendIcon]: hasVariant(variants, "endIcon", "endIcon"),
          [sty.titlesizes_medium]: hasVariant(variants, "sizes", "medium"),
          [sty.titlesizes_small]: hasVariant(variants, "sizes", "small"),
          [sty.titlestartIcon]: hasVariant(variants, "startIcon", "startIcon")
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Animação",
          value: args.title,
          className: classNames(sty.slotTargetTitle, {
            [sty.slotTargetTitlecolor_red]: hasVariant(
              variants,
              "color",
              "red"
            ),
            [sty.slotTargetTitlecolor_whiteWYellow]: hasVariant(
              variants,
              "color",
              "whiteWYellow"
            ),
            [sty.slotTargetTitlecolor_yellow]: hasVariant(
              variants,
              "color",
              "yellow"
            ),
            [sty.slotTargetTitleendIcon]: hasVariant(
              variants,
              "endIcon",
              "endIcon"
            ),
            [sty.slotTargetTitlesizes_medium]: hasVariant(
              variants,
              "sizes",
              "medium"
            ),
            [sty.slotTargetTitlesizes_small]: hasVariant(
              variants,
              "sizes",
              "small"
            ),
            [sty.slotTargetTitlestartIcon]: hasVariant(
              variants,
              "startIcon",
              "startIcon"
            )
          })
        })}
      </h5>

      {(hasVariant(variants, "endIcon", "endIcon") ? true : false)
        ? p.renderPlasmicSlot({
            defaultContents: (
              <ApoiaseIconHeartSelectedIcon
                className={classNames(projectcss.all, sty.svg___9Yl6Y)}
                role={"img"}
              />
            ),

            value: args.endIconSpace
          })
        : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  tabItem: ["tabItem", "title"],
  title: ["title"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  tabItem: "button";
  title: "h5";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTabItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTabItem__VariantsArgs;
    args?: PlasmicTabItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTabItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTabItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTabItem__ArgProps,
      internalVariantPropNames: PlasmicTabItem__VariantProps
    });

    return PlasmicTabItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "tabItem") {
    func.displayName = "PlasmicTabItem";
  } else {
    func.displayName = `PlasmicTabItem.${nodeName}`;
  }
  return func;
}

export const PlasmicTabItem = Object.assign(
  // Top-level PlasmicTabItem renders the root element
  makeNodeComponent("tabItem"),
  {
    // Helper components rendering sub-elements
    title: makeNodeComponent("title"),

    // Metadata about props expected for PlasmicTabItem
    internalVariantProps: PlasmicTabItem__VariantProps,
    internalArgProps: PlasmicTabItem__ArgProps
  }
);

export default PlasmicTabItem;
/* prettier-ignore-end */
