// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bFry1ML5XR1ujHJJdSKVcs
// Component: zibwN6i2Rr8x
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import CampaignTitleCard from "../../CampaignTitleCard"; // plasmic-import: 0oDoyWBcshhm/component
import CampaignAvatar from "../../CampaignAvatar"; // plasmic-import: ymQ_VZgdSMvX/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_apoiase_website_mobile_first.module.css"; // plasmic-import: bFry1ML5XR1ujHJJdSKVcs/projectcss
import sty from "./PlasmicSearchDropdown.module.css"; // plasmic-import: zibwN6i2Rr8x/css

export type PlasmicSearchDropdown__VariantMembers = {};

export type PlasmicSearchDropdown__VariantsArgs = {};
type VariantPropType = keyof PlasmicSearchDropdown__VariantsArgs;
export const PlasmicSearchDropdown__VariantProps = new Array<VariantPropType>();

export type PlasmicSearchDropdown__ArgsType = {};
type ArgPropType = keyof PlasmicSearchDropdown__ArgsType;
export const PlasmicSearchDropdown__ArgProps = new Array<ArgPropType>();

export type PlasmicSearchDropdown__OverridesType = {
  searchDropdown?: p.Flex<"div">;
};

export interface DefaultSearchDropdownProps {
  className?: string;
}

export const defaultSearchDropdown__Args: Partial<PlasmicSearchDropdown__ArgsType> =
  {};

function PlasmicSearchDropdown__RenderFunc(props: {
  variants: PlasmicSearchDropdown__VariantsArgs;
  args: PlasmicSearchDropdown__ArgsType;
  overrides: PlasmicSearchDropdown__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultSearchDropdown__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    true ? (
      <p.Stack
        as={"div"}
        data-plasmic-name={"searchDropdown"}
        data-plasmic-override={overrides.searchDropdown}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.searchDropdown
        )}
      >
        <CampaignTitleCard
          className={classNames("__wab_instance", sty.campaignTitleCard__v7H0L)}
        />

        <CampaignTitleCard
          className={classNames("__wab_instance", sty.campaignTitleCard__zZcs1)}
        />

        <CampaignTitleCard
          className={classNames("__wab_instance", sty.campaignTitleCard__qoebU)}
        />
      </p.Stack>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  searchDropdown: ["searchDropdown"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  searchDropdown: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSearchDropdown__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSearchDropdown__VariantsArgs;
    args?: PlasmicSearchDropdown__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSearchDropdown__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSearchDropdown__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSearchDropdown__ArgProps,
      internalVariantPropNames: PlasmicSearchDropdown__VariantProps
    });

    return PlasmicSearchDropdown__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "searchDropdown") {
    func.displayName = "PlasmicSearchDropdown";
  } else {
    func.displayName = `PlasmicSearchDropdown.${nodeName}`;
  }
  return func;
}

export const PlasmicSearchDropdown = Object.assign(
  // Top-level PlasmicSearchDropdown renders the root element
  makeNodeComponent("searchDropdown"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicSearchDropdown
    internalVariantProps: PlasmicSearchDropdown__VariantProps,
    internalArgProps: PlasmicSearchDropdown__ArgProps
  }
);

export default PlasmicSearchDropdown;
/* prettier-ignore-end */
