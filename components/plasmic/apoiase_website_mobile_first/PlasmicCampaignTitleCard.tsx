// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bFry1ML5XR1ujHJJdSKVcs
// Component: 0oDoyWBcshhm
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import CampaignTitle from "../../CampaignTitle"; // plasmic-import: rAKB-PB0bJnx/component
import CampaignAvatar from "../../CampaignAvatar"; // plasmic-import: ymQ_VZgdSMvX/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_apoiase_website_mobile_first.module.css"; // plasmic-import: bFry1ML5XR1ujHJJdSKVcs/projectcss
import sty from "./PlasmicCampaignTitleCard.module.css"; // plasmic-import: 0oDoyWBcshhm/css

export type PlasmicCampaignTitleCard__VariantMembers = {};

export type PlasmicCampaignTitleCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicCampaignTitleCard__VariantsArgs;
export const PlasmicCampaignTitleCard__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCampaignTitleCard__ArgsType = {
  titulo?: React.ReactNode;
  subtitulo?: React.ReactNode;
  campaignAvatar?: React.ReactNode;
};

type ArgPropType = keyof PlasmicCampaignTitleCard__ArgsType;
export const PlasmicCampaignTitleCard__ArgProps = new Array<ArgPropType>(
  "titulo",
  "subtitulo",
  "campaignAvatar"
);

export type PlasmicCampaignTitleCard__OverridesType = {
  campaignTitleCard?: p.Flex<"div">;
  campaignTitle?: p.Flex<typeof CampaignTitle>;
};

export interface DefaultCampaignTitleCardProps {
  titulo?: React.ReactNode;
  subtitulo?: React.ReactNode;
  campaignAvatar?: React.ReactNode;
  className?: string;
}

export const defaultCampaignTitleCard__Args: Partial<PlasmicCampaignTitleCard__ArgsType> =
  {};

function PlasmicCampaignTitleCard__RenderFunc(props: {
  variants: PlasmicCampaignTitleCard__VariantsArgs;
  args: PlasmicCampaignTitleCard__ArgsType;
  overrides: PlasmicCampaignTitleCard__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultCampaignTitleCard__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"campaignTitleCard"}
      data-plasmic-override={overrides.campaignTitleCard}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.campaignTitleCard
      )}
    >
      <CampaignTitle
        data-plasmic-name={"campaignTitle"}
        data-plasmic-override={overrides.campaignTitle}
        campaignAvatar={p.renderPlasmicSlot({
          defaultContents: (
            <CampaignAvatar
              className={classNames(
                "__wab_instance",
                sty.campaignAvatar__dzjht
              )}
            />
          ),

          value: args.campaignAvatar
        })}
        className={classNames("__wab_instance", sty.campaignTitle)}
        subtitulo={p.renderPlasmicSlot({
          defaultContents: "SubtÃ­tulo de Campanha",
          value: args.subtitulo
        })}
        titulo={p.renderPlasmicSlot({
          defaultContents: "Nome da Campanha",
          value: args.titulo
        })}
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  campaignTitleCard: ["campaignTitleCard", "campaignTitle"],
  campaignTitle: ["campaignTitle"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  campaignTitleCard: "div";
  campaignTitle: typeof CampaignTitle;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCampaignTitleCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCampaignTitleCard__VariantsArgs;
    args?: PlasmicCampaignTitleCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCampaignTitleCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCampaignTitleCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCampaignTitleCard__ArgProps,
      internalVariantPropNames: PlasmicCampaignTitleCard__VariantProps
    });

    return PlasmicCampaignTitleCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "campaignTitleCard") {
    func.displayName = "PlasmicCampaignTitleCard";
  } else {
    func.displayName = `PlasmicCampaignTitleCard.${nodeName}`;
  }
  return func;
}

export const PlasmicCampaignTitleCard = Object.assign(
  // Top-level PlasmicCampaignTitleCard renders the root element
  makeNodeComponent("campaignTitleCard"),
  {
    // Helper components rendering sub-elements
    campaignTitle: makeNodeComponent("campaignTitle"),

    // Metadata about props expected for PlasmicCampaignTitleCard
    internalVariantProps: PlasmicCampaignTitleCard__VariantProps,
    internalArgProps: PlasmicCampaignTitleCard__ArgProps
  }
);

export default PlasmicCampaignTitleCard;
/* prettier-ignore-end */
