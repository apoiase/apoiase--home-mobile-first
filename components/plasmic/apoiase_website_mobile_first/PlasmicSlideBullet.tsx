// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bFry1ML5XR1ujHJJdSKVcs
// Component: W9n9GpA7ShNF
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Bullet from "../../Bullet"; // plasmic-import: oUXgrQk59ACL/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_apoiase_website_mobile_first.module.css"; // plasmic-import: bFry1ML5XR1ujHJJdSKVcs/projectcss
import sty from "./PlasmicSlideBullet.module.css"; // plasmic-import: W9n9GpA7ShNF/css

export type PlasmicSlideBullet__VariantMembers = {};

export type PlasmicSlideBullet__VariantsArgs = {};
type VariantPropType = keyof PlasmicSlideBullet__VariantsArgs;
export const PlasmicSlideBullet__VariantProps = new Array<VariantPropType>();

export type PlasmicSlideBullet__ArgsType = {};
type ArgPropType = keyof PlasmicSlideBullet__ArgsType;
export const PlasmicSlideBullet__ArgProps = new Array<ArgPropType>();

export type PlasmicSlideBullet__OverridesType = {
  slideBullet?: p.Flex<"div">;
};

export interface DefaultSlideBulletProps {
  className?: string;
}

export const defaultSlideBullet__Args: Partial<PlasmicSlideBullet__ArgsType> =
  {};

function PlasmicSlideBullet__RenderFunc(props: {
  variants: PlasmicSlideBullet__VariantsArgs;
  args: PlasmicSlideBullet__ArgsType;
  overrides: PlasmicSlideBullet__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultSlideBullet__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    true ? (
      <p.Stack
        as={"div"}
        data-plasmic-name={"slideBullet"}
        data-plasmic-override={overrides.slideBullet}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.slideBullet
        )}
      >
        {true ? (
          <Bullet
            ativo={true}
            className={classNames("__wab_instance", sty.bullet__rgi73)}
          />
        ) : null}
        {true ? (
          <Bullet
            className={classNames("__wab_instance", sty.bullet___5BSyL)}
          />
        ) : null}
        {true ? (
          <Bullet className={classNames("__wab_instance", sty.bullet__fumJx)} />
        ) : null}
        {true ? (
          <Bullet className={classNames("__wab_instance", sty.bullet__ozXj3)} />
        ) : null}
        {true ? (
          <Bullet className={classNames("__wab_instance", sty.bullet__sVupz)} />
        ) : null}
      </p.Stack>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  slideBullet: ["slideBullet"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  slideBullet: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSlideBullet__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSlideBullet__VariantsArgs;
    args?: PlasmicSlideBullet__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSlideBullet__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSlideBullet__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSlideBullet__ArgProps,
      internalVariantPropNames: PlasmicSlideBullet__VariantProps
    });

    return PlasmicSlideBullet__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "slideBullet") {
    func.displayName = "PlasmicSlideBullet";
  } else {
    func.displayName = `PlasmicSlideBullet.${nodeName}`;
  }
  return func;
}

export const PlasmicSlideBullet = Object.assign(
  // Top-level PlasmicSlideBullet renders the root element
  makeNodeComponent("slideBullet"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicSlideBullet
    internalVariantProps: PlasmicSlideBullet__VariantProps,
    internalArgProps: PlasmicSlideBullet__ArgProps
  }
);

export default PlasmicSlideBullet;
/* prettier-ignore-end */
